// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeaEco.EntityFramework.Contexts;

#nullable disable

namespace SeaEco.EntityFramework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250302205734_AnsatteStructureChanged")]
    partial class AnsatteStructureChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Ansatte", b =>
                {
                    b.Property<int>("Brukerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("brukerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Brukerid"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("boolean")
                        .HasColumnName("aktiv");

                    b.Property<DateTime>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("epost");

                    b.Property<bool>("ErAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("er_admin");

                    b.Property<string>("Etternavn")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("etternavn");

                    b.Property<string>("Fornavn")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("fornavn");

                    b.Property<string>("Passord")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("passord");

                    b.HasKey("Brukerid")
                        .HasName("ansatte_pkey");

                    b.ToTable("ansatte", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BBilder", b =>
                {
                    b.Property<int>("Bildeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bildeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Bildeid"));

                    b.Property<byte[]>("Bilde")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("bilde");

                    b.Property<DateTime>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Posisjon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("posisjon");

                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.HasKey("Bildeid")
                        .HasName("b_bilder_pkey");

                    b.HasIndex("Prosjektid", "Stasjonsid");

                    b.ToTable("b_bilder", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BDyr", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.Property<int?>("Antallborstemark")
                        .HasColumnType("integer")
                        .HasColumnName("antallborstemark");

                    b.Property<int?>("Antallkrepsdyr")
                        .HasColumnType("integer")
                        .HasColumnName("antallkrepsdyr");

                    b.Property<int?>("Antallpigghunder")
                        .HasColumnType("integer")
                        .HasColumnName("antallpigghunder");

                    b.Property<int?>("Antallskjell")
                        .HasColumnType("integer")
                        .HasColumnName("antallskjell");

                    b.Property<bool?>("Beggiota")
                        .HasColumnType("boolean")
                        .HasColumnName("beggiota");

                    b.Property<bool?>("Fekalier")
                        .HasColumnType("boolean")
                        .HasColumnName("fekalier");

                    b.Property<bool?>("Foor")
                        .HasColumnType("boolean")
                        .HasColumnName("foor");

                    b.HasKey("Prosjektid", "Stasjonsid")
                        .HasName("b_dyr_pkey");

                    b.ToTable("b_dyr", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProsjekt", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int?>("Ansvarligansatt2id")
                        .HasColumnType("integer")
                        .HasColumnName("ansvarligansatt2id");

                    b.Property<int?>("Ansvarligansatt3id")
                        .HasColumnType("integer")
                        .HasColumnName("ansvarligansatt3id");

                    b.Property<int?>("Ansvarligansatt4id")
                        .HasColumnType("integer")
                        .HasColumnName("ansvarligansatt4id");

                    b.Property<int?>("Ansvarligansatt5id")
                        .HasColumnType("integer")
                        .HasColumnName("ansvarligansatt5id");

                    b.Property<int>("Ansvarligansattid")
                        .HasColumnType("integer")
                        .HasColumnName("ansvarligansattid");

                    b.Property<int>("Antallstasjoner")
                        .HasColumnType("integer")
                        .HasColumnName("antallstasjoner");

                    b.Property<int>("Biomasse")
                        .HasColumnType("integer")
                        .HasColumnName("biomasse");

                    b.Property<DateTime?>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Kundeepost")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("kundeepost");

                    b.Property<int>("Kundeid")
                        .HasColumnType("integer")
                        .HasColumnName("kundeid");

                    b.Property<string>("Kundekontaktpersons")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("kundekontaktpersons");

                    b.Property<int>("Kundetlf")
                        .HasColumnType("integer")
                        .HasColumnName("kundetlf");

                    b.Property<string>("Lokalitet")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("lokalitet");

                    b.Property<int>("Lokalitetid")
                        .HasColumnType("integer")
                        .HasColumnName("lokalitetid");

                    b.Property<string>("Merknad")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("merknad");

                    b.Property<int>("Mtbtillatelse")
                        .HasColumnType("integer")
                        .HasColumnName("mtbtillatelse");

                    b.Property<DateOnly>("Planlagtfeltdato")
                        .HasColumnType("date")
                        .HasColumnName("planlagtfeltdato");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("status");

                    b.HasKey("Prosjektid")
                        .HasName("b_prosjekt_pkey");

                    b.HasIndex("Ansvarligansatt2id");

                    b.HasIndex("Ansvarligansatt3id");

                    b.HasIndex("Ansvarligansatt4id");

                    b.HasIndex("Ansvarligansatt5id");

                    b.HasIndex("Ansvarligansattid");

                    b.HasIndex("Kundeid");

                    b.ToTable("b_prosjekt", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProsjektUtstyr", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<DateOnly>("Datokalibrert")
                        .HasColumnType("date")
                        .HasColumnName("datokalibrert");

                    b.Property<DateTime?>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Grabbid")
                        .HasColumnType("integer")
                        .HasColumnName("grabbid");

                    b.Property<int>("Phehmeter")
                        .HasColumnType("integer")
                        .HasColumnName("phehmeter");

                    b.Property<int>("Silid")
                        .HasColumnType("integer")
                        .HasColumnName("silid");

                    b.HasKey("Prosjektid")
                        .HasName("b_prosjekt_utstyr_pkey");

                    b.ToTable("b_prosjekt_utstyr", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProvetakingsplan", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<DateTime>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Planlagtanalyser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("planlagtanalyser")
                        .HasDefaultValueSql("'Parameter I, II og III'::character varying");

                    b.Property<int>("Planlagtdybde")
                        .HasColumnType("integer")
                        .HasColumnName("planlagtdybde");

                    b.Property<DateOnly>("Planlagtfeltdato")
                        .HasColumnType("date")
                        .HasColumnName("planlagtfeltdato");

                    b.Property<int>("Planlagtkordinatern")
                        .HasColumnType("integer")
                        .HasColumnName("planlagtkordinatern");

                    b.Property<int>("Planlagtkordinatero")
                        .HasColumnType("integer")
                        .HasColumnName("planlagtkordinatero");

                    b.Property<int?>("Planlegger2id")
                        .HasColumnType("integer")
                        .HasColumnName("planlegger2id");

                    b.Property<int>("Planleggerid")
                        .HasColumnType("integer")
                        .HasColumnName("planleggerid");

                    b.Property<int>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.HasKey("Prosjektid")
                        .HasName("b_provetakingsplan_pkey");

                    b.HasIndex("Planlegger2id");

                    b.HasIndex("Planleggerid");

                    b.ToTable("b_provetakingsplan", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BRapport", b =>
                {
                    b.Property<int>("Rapportid")
                        .HasColumnType("integer")
                        .HasColumnName("rapportid");

                    b.Property<DateTime?>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Generertavid")
                        .HasColumnType("integer")
                        .HasColumnName("generertavid");

                    b.Property<int>("Godkjentavid")
                        .HasColumnType("integer")
                        .HasColumnName("godkjentavid");

                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int>("Rapporttype")
                        .HasColumnType("integer")
                        .HasColumnName("rapporttype");

                    b.HasKey("Rapportid")
                        .HasName("b_rapport_pkey");

                    b.HasIndex("Generertavid");

                    b.HasIndex("Godkjentavid");

                    b.HasIndex("Prosjektid");

                    b.ToTable("b_rapport", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BSensorisk", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.Property<bool>("Farge")
                        .HasColumnType("boolean")
                        .HasColumnName("farge");

                    b.Property<bool>("Gassbobler")
                        .HasColumnType("boolean")
                        .HasColumnName("gassbobler");

                    b.Property<int>("Grabbvolum")
                        .HasColumnType("integer")
                        .HasColumnName("grabbvolum");

                    b.Property<int>("Konsistens")
                        .HasColumnType("integer")
                        .HasColumnName("konsistens");

                    b.Property<int>("Lukt")
                        .HasColumnType("integer")
                        .HasColumnName("lukt");

                    b.Property<int>("ProveEh")
                        .HasColumnType("integer")
                        .HasColumnName("prove_eh");

                    b.Property<int>("ProvePh")
                        .HasColumnType("integer")
                        .HasColumnName("prove_ph");

                    b.Property<int>("ProveTemperatur")
                        .HasColumnType("integer")
                        .HasColumnName("prove_temperatur");

                    b.Property<int>("Tykkelseslamlag")
                        .HasColumnType("integer")
                        .HasColumnName("tykkelseslamlag");

                    b.HasKey("Prosjektid", "Stasjonsid")
                        .HasName("b_sensorisk_pkey");

                    b.HasIndex("Farge");

                    b.HasIndex("Gassbobler");

                    b.HasIndex("Grabbvolum");

                    b.HasIndex("Konsistens");

                    b.HasIndex("Lukt");

                    b.HasIndex("Tykkelseslamlag");

                    b.ToTable("b_sensorisk", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BStasjon", b =>
                {
                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.Property<int>("Antallgrabbskudd")
                        .HasColumnType("integer")
                        .HasColumnName("antallgrabbskudd");

                    b.Property<string>("Arter")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("arter");

                    b.Property<int>("Bunnsammensettningid")
                        .HasColumnType("integer")
                        .HasColumnName("bunnsammensettningid");

                    b.Property<bool>("Bunntype")
                        .HasColumnType("boolean")
                        .HasColumnName("bunntype");

                    b.Property<DateOnly?>("Datokalibrert")
                        .HasColumnType("date")
                        .HasColumnName("datokalibrert");

                    b.Property<DateTime?>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Dybde")
                        .HasColumnType("integer")
                        .HasColumnName("dybde");

                    b.Property<bool>("Dyr")
                        .HasColumnType("boolean")
                        .HasColumnName("dyr");

                    b.Property<int?>("Grabbid")
                        .HasColumnType("integer")
                        .HasColumnName("grabbid");

                    b.Property<bool>("Grabhastighetgodkjent")
                        .HasColumnType("boolean")
                        .HasColumnName("grabhastighetgodkjent");

                    b.Property<int>("Kordinatern")
                        .HasColumnType("integer")
                        .HasColumnName("kordinatern");

                    b.Property<int>("Kordinatero")
                        .HasColumnType("integer")
                        .HasColumnName("kordinatero");

                    b.Property<string>("Korrigering")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("korrigering");

                    b.Property<string>("Merknad")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)")
                        .HasColumnName("merknad");

                    b.Property<int?>("Phehmeter")
                        .HasColumnType("integer")
                        .HasColumnName("phehmeter");

                    b.Property<bool?>("Sensoriskutfort")
                        .HasColumnType("boolean")
                        .HasColumnName("sensoriskutfort");

                    b.Property<int?>("Silid")
                        .HasColumnType("integer")
                        .HasColumnName("silid");

                    b.Property<int>("SkjovannEh")
                        .HasColumnType("integer")
                        .HasColumnName("skjovann_eh");

                    b.Property<int>("SkjovannPh")
                        .HasColumnType("integer")
                        .HasColumnName("skjovann_ph");

                    b.Property<int>("SkjovannTemperatur")
                        .HasColumnType("integer")
                        .HasColumnName("skjovann_temperatur");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("status");

                    b.HasKey("Prosjektid", "Stasjonsid")
                        .HasName("b_stasjon_pkey");

                    b.HasIndex("Bunnsammensettningid");

                    b.ToTable("b_stasjon", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Endringslogg", b =>
                {
                    b.Property<int>("Loggid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("loggid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Loggid"));

                    b.Property<DateTime>("Datoregistrert")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert");

                    b.Property<int>("Endretavid")
                        .HasColumnType("integer")
                        .HasColumnName("endretavid");

                    b.Property<int>("Prosjektid")
                        .HasColumnType("integer")
                        .HasColumnName("prosjektid");

                    b.Property<int?>("Stasjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("stasjonsid");

                    b.Property<string>("Tabellendret")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("tabellendret");

                    b.Property<string>("Typeending")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("typeending");

                    b.Property<string>("Verdiendret")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("verdiendret");

                    b.Property<string>("Verdiendretfra")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("verdiendretfra");

                    b.Property<string>("Verdiendrettil")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("verdiendrettil");

                    b.HasKey("Loggid")
                        .HasName("endringslogg_pkey");

                    b.HasIndex("Endretavid");

                    b.ToTable("endringslogg", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Kunde", b =>
                {
                    b.Property<int>("Kundeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("kundeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Kundeid"));

                    b.Property<string>("Fylke")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("fylke");

                    b.Property<string>("Kommune")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("kommune");

                    b.Property<string>("Kontaktperson")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("kontaktperson");

                    b.Property<string>("Oppdragsgiver")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("oppdragsgiver");

                    b.Property<int>("Orgnr")
                        .HasColumnType("integer")
                        .HasColumnName("orgnr");

                    b.Property<string>("Postadresse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("postadresse");

                    b.HasKey("Kundeid")
                        .HasName("kunde_pkey");

                    b.ToTable("kunde", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Revisjonslogg", b =>
                {
                    b.Property<int>("Revisjonsid")
                        .HasColumnType("integer")
                        .HasColumnName("revisjonsid");

                    b.Property<DateTime?>("Datoregistrert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datoregistrert")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Gjeldenderevisjon")
                        .HasColumnType("boolean")
                        .HasColumnName("gjeldenderevisjon");

                    b.Property<string>("Revisjonskommentar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("revisjonskommentar");

                    b.HasKey("Revisjonsid")
                        .HasName("revisjonslogg_pkey");

                    b.ToTable("revisjonslogg", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysArter", b =>
                {
                    b.Property<int>("Artid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("artid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Artid"));

                    b.Property<string>("Artsforkortelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("artsforkortelse");

                    b.Property<string>("Artsnavn")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("artsnavn");

                    b.HasKey("Artid")
                        .HasName("sys_arter_pkey");

                    b.ToTable("sys_arter", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysBunsammensettning", b =>
                {
                    b.Property<int>("Bunnsammensettningid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bunnsammensettningid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Bunnsammensettningid"));

                    b.Property<bool?>("Fjellbunn")
                        .HasColumnType("boolean")
                        .HasColumnName("fjellbunn");

                    b.Property<bool?>("Grus")
                        .HasColumnType("boolean")
                        .HasColumnName("grus");

                    b.Property<bool?>("Leire")
                        .HasColumnType("boolean")
                        .HasColumnName("leire");

                    b.Property<bool?>("Sand")
                        .HasColumnType("boolean")
                        .HasColumnName("sand");

                    b.Property<bool?>("Silt")
                        .HasColumnType("boolean")
                        .HasColumnName("silt");

                    b.Property<bool?>("Skjellsand")
                        .HasColumnType("boolean")
                        .HasColumnName("skjellsand");

                    b.Property<bool?>("Steinbunn")
                        .HasColumnType("boolean")
                        .HasColumnName("steinbunn");

                    b.HasKey("Bunnsammensettningid")
                        .HasName("sys_bunsammensettning_pkey");

                    b.ToTable("sys_bunsammensettning", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysFarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<bool>("Verdi")
                        .HasColumnType("boolean")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_farge_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_farge_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_farge", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysGassbobler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<bool>("Verdi")
                        .HasColumnType("boolean")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_gassbobler_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_gassbobler_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_gassbobler", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysGrabbvolum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<int>("Verdi")
                        .HasColumnType("integer")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_grabbvolum_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_grabbvolum_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_grabbvolum", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysKonsisten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<int>("Verdi")
                        .HasColumnType("integer")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_konsistens_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_konsistens_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_konsistens", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysLukt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<int>("Verdi")
                        .HasColumnType("integer")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_lukt_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_lukt_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_lukt", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysMerknad", b =>
                {
                    b.Property<int>("Merknadid")
                        .HasColumnType("integer")
                        .HasColumnName("merknadid");

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("beskrivelse");

                    b.Property<string>("Forkortelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("forkortelse");

                    b.HasKey("Merknadid")
                        .HasName("sys_merknad_pkey");

                    b.ToTable("sys_merknad", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysTykkelsepaslam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("beskrivelse");

                    b.Property<int>("Verdi")
                        .HasColumnType("integer")
                        .HasColumnName("verdi");

                    b.HasKey("Id")
                        .HasName("sys_tykkelsepaslam_pkey");

                    b.HasIndex(new[] { "Verdi" }, "sys_tykkelsepaslam_verdi_key")
                        .IsUnique();

                    b.ToTable("sys_tykkelsepaslam", (string)null);
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BBilder", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.BStasjon", "BStasjon")
                        .WithMany("BBilders")
                        .HasForeignKey("Prosjektid", "Stasjonsid")
                        .IsRequired()
                        .HasConstraintName("fk_b_bilder_b_stasjon");

                    b.Navigation("BStasjon");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BDyr", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.BStasjon", "BStasjon")
                        .WithOne("BDyr")
                        .HasForeignKey("SeaEco.EntityFramework.Entities.BDyr", "Prosjektid", "Stasjonsid")
                        .IsRequired()
                        .HasConstraintName("fk_b_dyr_b_stasjon");

                    b.Navigation("BStasjon");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProsjekt", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Ansvarligansatt2")
                        .WithMany("BProsjektAnsvarligansatt2s")
                        .HasForeignKey("Ansvarligansatt2id")
                        .HasConstraintName("fk_b_prosjekt_ansatte2");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Ansvarligansatt3")
                        .WithMany("BProsjektAnsvarligansatt3s")
                        .HasForeignKey("Ansvarligansatt3id")
                        .HasConstraintName("fk_b_prosjekt_ansatte3");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Ansvarligansatt4")
                        .WithMany("BProsjektAnsvarligansatt4s")
                        .HasForeignKey("Ansvarligansatt4id")
                        .HasConstraintName("fk_b_prosjekt_ansatte4");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Ansvarligansatt5")
                        .WithMany("BProsjektAnsvarligansatt5s")
                        .HasForeignKey("Ansvarligansatt5id")
                        .HasConstraintName("fk_b_prosjekt_ansatte5");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Ansvarligansatt")
                        .WithMany("BProsjektAnsvarligansatts")
                        .HasForeignKey("Ansvarligansattid")
                        .IsRequired()
                        .HasConstraintName("fk_b_prosjekt_ansatte1");

                    b.HasOne("SeaEco.EntityFramework.Entities.Kunde", "Kunde")
                        .WithMany("BProsjekts")
                        .HasForeignKey("Kundeid")
                        .IsRequired()
                        .HasConstraintName("fk_b_prosjekt_kunde");

                    b.Navigation("Ansvarligansatt");

                    b.Navigation("Ansvarligansatt2");

                    b.Navigation("Ansvarligansatt3");

                    b.Navigation("Ansvarligansatt4");

                    b.Navigation("Ansvarligansatt5");

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProsjektUtstyr", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.BProsjekt", "Prosjekt")
                        .WithOne("BProsjektUtstyr")
                        .HasForeignKey("SeaEco.EntityFramework.Entities.BProsjektUtstyr", "Prosjektid")
                        .IsRequired()
                        .HasConstraintName("fk_b_prosjekt_utstyr_b_prosjekt");

                    b.Navigation("Prosjekt");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProvetakingsplan", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Planlegger2")
                        .WithMany("BProvetakingsplanPlanlegger2s")
                        .HasForeignKey("Planlegger2id")
                        .HasConstraintName("fk_b_provetakingsplan_ansatte2");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Planlegger")
                        .WithMany("BProvetakingsplanPlanleggers")
                        .HasForeignKey("Planleggerid")
                        .IsRequired()
                        .HasConstraintName("fk_b_provetakingsplan_ansatte1");

                    b.HasOne("SeaEco.EntityFramework.Entities.BProsjekt", "Prosjekt")
                        .WithOne("BProvetakingsplan")
                        .HasForeignKey("SeaEco.EntityFramework.Entities.BProvetakingsplan", "Prosjektid")
                        .IsRequired()
                        .HasConstraintName("fk_b_provetakingsplan_b_prosjekt");

                    b.Navigation("Planlegger");

                    b.Navigation("Planlegger2");

                    b.Navigation("Prosjekt");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BRapport", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Generertav")
                        .WithMany("BRapportGenerertavs")
                        .HasForeignKey("Generertavid")
                        .IsRequired()
                        .HasConstraintName("fk_b_rapport_ansattgenerert");

                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Godkjentav")
                        .WithMany("BRapportGodkjentavs")
                        .HasForeignKey("Godkjentavid")
                        .IsRequired()
                        .HasConstraintName("fk_b_rapport_ansattgodkjent");

                    b.HasOne("SeaEco.EntityFramework.Entities.BProsjekt", "Prosjekt")
                        .WithMany("BRapports")
                        .HasForeignKey("Prosjektid")
                        .IsRequired()
                        .HasConstraintName("fk_b_rapport_b_prosjekt");

                    b.Navigation("Generertav");

                    b.Navigation("Godkjentav");

                    b.Navigation("Prosjekt");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BSensorisk", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.SysFarge", "FargeNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Farge")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_farge");

                    b.HasOne("SeaEco.EntityFramework.Entities.SysGassbobler", "GassboblerNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Gassbobler")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_gassbobler");

                    b.HasOne("SeaEco.EntityFramework.Entities.SysGrabbvolum", "GrabbvolumNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Grabbvolum")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_grabbvolum");

                    b.HasOne("SeaEco.EntityFramework.Entities.SysKonsisten", "KonsistensNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Konsistens")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_konsistens");

                    b.HasOne("SeaEco.EntityFramework.Entities.SysLukt", "LuktNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Lukt")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_lukt");

                    b.HasOne("SeaEco.EntityFramework.Entities.SysTykkelsepaslam", "TykkelseslamlagNavigation")
                        .WithMany("BSensorisks")
                        .HasForeignKey("Tykkelseslamlag")
                        .HasPrincipalKey("Verdi")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_sys_tykkelsepaslam");

                    b.HasOne("SeaEco.EntityFramework.Entities.BStasjon", "BStasjon")
                        .WithOne("BSensorisk")
                        .HasForeignKey("SeaEco.EntityFramework.Entities.BSensorisk", "Prosjektid", "Stasjonsid")
                        .IsRequired()
                        .HasConstraintName("fk_b_sensorisk_b_stasjon");

                    b.Navigation("BStasjon");

                    b.Navigation("FargeNavigation");

                    b.Navigation("GassboblerNavigation");

                    b.Navigation("GrabbvolumNavigation");

                    b.Navigation("KonsistensNavigation");

                    b.Navigation("LuktNavigation");

                    b.Navigation("TykkelseslamlagNavigation");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BStasjon", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.SysBunsammensettning", "Bunnsammensettning")
                        .WithMany("BStasjons")
                        .HasForeignKey("Bunnsammensettningid")
                        .IsRequired()
                        .HasConstraintName("fk_b_stasjon_sys_bunsammensettning");

                    b.HasOne("SeaEco.EntityFramework.Entities.BProsjekt", "Prosjekt")
                        .WithMany("BStasjons")
                        .HasForeignKey("Prosjektid")
                        .IsRequired()
                        .HasConstraintName("fk_b_stasjon_b_prosjekt");

                    b.Navigation("Bunnsammensettning");

                    b.Navigation("Prosjekt");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Endringslogg", b =>
                {
                    b.HasOne("SeaEco.EntityFramework.Entities.Ansatte", "Endretav")
                        .WithMany("Endringsloggs")
                        .HasForeignKey("Endretavid")
                        .IsRequired()
                        .HasConstraintName("fk_endringslogg_ansatte");

                    b.Navigation("Endretav");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Ansatte", b =>
                {
                    b.Navigation("BProsjektAnsvarligansatt2s");

                    b.Navigation("BProsjektAnsvarligansatt3s");

                    b.Navigation("BProsjektAnsvarligansatt4s");

                    b.Navigation("BProsjektAnsvarligansatt5s");

                    b.Navigation("BProsjektAnsvarligansatts");

                    b.Navigation("BProvetakingsplanPlanlegger2s");

                    b.Navigation("BProvetakingsplanPlanleggers");

                    b.Navigation("BRapportGenerertavs");

                    b.Navigation("BRapportGodkjentavs");

                    b.Navigation("Endringsloggs");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BProsjekt", b =>
                {
                    b.Navigation("BProsjektUtstyr");

                    b.Navigation("BProvetakingsplan");

                    b.Navigation("BRapports");

                    b.Navigation("BStasjons");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.BStasjon", b =>
                {
                    b.Navigation("BBilders");

                    b.Navigation("BDyr");

                    b.Navigation("BSensorisk");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.Kunde", b =>
                {
                    b.Navigation("BProsjekts");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysBunsammensettning", b =>
                {
                    b.Navigation("BStasjons");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysFarge", b =>
                {
                    b.Navigation("BSensorisks");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysGassbobler", b =>
                {
                    b.Navigation("BSensorisks");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysGrabbvolum", b =>
                {
                    b.Navigation("BSensorisks");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysKonsisten", b =>
                {
                    b.Navigation("BSensorisks");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysLukt", b =>
                {
                    b.Navigation("BSensorisks");
                });

            modelBuilder.Entity("SeaEco.EntityFramework.Entities.SysTykkelsepaslam", b =>
                {
                    b.Navigation("BSensorisks");
                });
#pragma warning restore 612, 618
        }
    }
}
