@using System.Text.Json
@using SeaEco.Client.Resources
@using SeaEco.Abstractions.Models.Project
@using SeaEco.Abstractions.Models.SamplingPlan
@using SeaEco.Abstractions.Models.Stations
@using SeaEco.Abstractions.Models.User
@inject HttpClient Http


@if (_isLoading)
{
}
else
{
    <div class="d-flex flex-column gap-3 mt-3">
        <EditForm EditContext="_editContext" OnValidSubmit="EditProjectPlan">
            <DataAnnotationsValidator />
            <div class="d-flex flex-column gap-3  box-border p-4 min-width-plan">
                <span>Generell plan-informasjon</span>
                <div class="d-flex form-floating">
                    <InputSelect @bind-Value="_newPlan.PlanleggerId" id="user1" class="form-control" disabled="@(!EditProjectPlanVar)">
                        <option value=""></option>
                        @foreach (var user in _users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </InputSelect>
                    <label for="user1">@Resources.InputTextUserProjectPlan</label>
                </div>
                <div class="d-flex form-floating">
                    <InputDate @bind-Value="_newPlan.Planlagtfeltdato" id="date" class="form-control" disabled="@(!EditProjectPlanVar)">
                    </InputDate>
                    <label for="date">@Resources.InputTextPlanedDate</label>
                </div>
                <div class="d-flex flex-row align-self-end justify-content-end w-100">
                    @if (!EditProjectPlanVar)
                    {
                        <button class="btn custom-btn" type="button" @onclick="OnClickProjectPlan">
                            @(_isExistingPlan ? Resources.ButtonEdit : "Opprett")
                        </button>
                    }
                    else
                    {
                        <div class="d-flex gap-2 flex-column flex-xxl-row w-100 ">
                            <div class="d-flex flex-grow-1"></div>
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelEditProjectPlan">
                                    @Resources.ButtonCancel
                                </button>
                                <button class="btn custom-btn" type="submit">
                                    @Resources.ButtonSave
                                </button>
                            </div>
                        </div>
                    }
                </div>
                
                <div class=" text-center">
                    <div class="custom-validation-summary">
                        <ValidationSummary/>
                    </div>
                    @if (!string.IsNullOrEmpty(_errorMessageProjectPlan))
                    {
                        <p class="text-danger">@_errorMessageProjectPlan</p>
                    }
                </div>
            </div>
        </EditForm>
        @if (_isExistingPlan) 
        { 
            foreach (var station in _newStationPlan.Select((s, i) => (s, i)))
            {
                var dto = station.s;
                var idx = station.i;
                if (_editingStationIndex == idx)
                {
                    <EditForm Model="_newStationPlan[idx]" OnValidSubmit="() => SaveEditedStation(idx)">
                        <DataAnnotationsValidator/>
                        <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                            <div class="d-flex">
                                <span>@Resources.InputTextStation @idx</span>
                                <div class="flex-grow-1"></div>
                                @if (EditProjectStationPlanVar)
                                {
                                    <span class="bi bi-x-circle show cursor" @onclick="@(() => RemoveStation(idx))">
                                    </span>
                                }
                            </div>

                            <div class="d-flex flex-xxl-row flex-column gap-3">
                                <div class="d-flex form-floating">
                                    <InputNumber class="form-control" id=@($"positionNg_{station}")  @bind-Value="_newStationPlan[idx].NorthDegree" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="positionNg_@station">Nordlig grader °</label>
                                </div>
                                <div class="d-flex form-floating">
                                    <InputNumber class="form-control" id=@($"positionNm_{station}") @bind-Value="_newStationPlan[idx].NorthMinutes" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="positionNm_@station">Nordlig minutter '</label>
                                </div>
                            </div>
                            <div class="d-flex flex-xxl-row flex-column gap-3">
                                <div class="d-flex form-floating">
                                    <InputNumber class="form-control" id=@($"positionEg_{station}")  @bind-Value="_newStationPlan[idx].EastDegree" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="positionEg_@station">Østlig grader °</label>
                                </div>
                                <div class="d-flex form-floating">
                                    <InputNumber class="form-control" id=@($"positionEm_{station}") @bind-Value=" _newStationPlan[idx].EastMinutes" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="positionEm_@station">Østlig minutter '</label>
                                </div>
                            </div>
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" id=@($"depth_{station}") @bind-Value="_newStationPlan[idx].Dybde" disabled="@(!EditProjectStationPlanVar)"/>
                                <label for="depth_@station">@Resources.InputTextDepth</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputText class="form-control" id=@($"method_{station}") @bind-Value="_newStationPlan[idx].Analyser" disabled="@(!EditProjectStationPlanVar)"/>
                                <label for="method_@station">@Resources.InputTextMethod</label>
                            </div>
                            <div class="d-flex gap-2 flex-column flex-xxl-row w-100 mt-4">
                                <div class="d-flex flex-grow-1"></div>
                                <div class="d-flex gap-2 justify-content-center">
                                    <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelEditProjectStationPlan">
                                        @Resources.ButtonCancel
                                    </button>
                                    <button class="btn custom-btn" type="submit">
                                        @Resources.ButtonSave
                                    </button>
                                </div>
                            </div>
                            
                            <div class=" text-center">
                                <div class="custom-validation-summary">
                                    <ValidationSummary/>
                                </div>
                                @if (!string.IsNullOrEmpty(_errorMessage))
                                {
                                    <p class="text-danger">@_errorMessage</p>
                                }
                            </div>
                        </div>
                    </EditForm>
                }
            }

            if(_isExistingStationPlan)
            {
            foreach (var station2 in _existingStationPlan)
                {
                    <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                        <div class="d-flex">
                            <span>@Resources.InputTextStation @station2.Nummer</span>
                            <div class="flex-grow-1"></div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputText class="form-control" id=@($"positionNg_{station2}")  @bind-Value="station2.KoordinatNord" disabled/>
                                <label for="positionNg_@station2">Nordlig grader °</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputText class="form-control" id=@($"positionEg_{station2}")  @bind-Value="station2.KoordinatOst" disabled/>
                                <label for="positionEg_@station2">Østlig grader °</label>
                            </div>
                        </div>
                        <div class="d-flex form-floating">
                            <InputNumber class="form-control" id=@($"depth_{station2}") @bind-Value="station2.Dybde" disabled/>
                            <label for="depth_@station2">@Resources.InputTextDepth</label>
                        </div>
                        <div class="d-flex form-floating">
                            <InputText class="form-control" id=@($"method_{station2}") @bind-Value="station2.Analyser" disabled/>
                            <label for="method_@station2">@Resources.InputTextMethod</label>
                        </div>
                        @if (!EditProjectStationPlanVar)
                        {
                            <div class="d-flex gap-2 flex-column flex-xxl-row w-100 mt-4">
                                <div class="d-flex flex-grow-1"></div>
                                <button class="btn custom-btn" type="button" @onclick="() => OnClickProjectStationPlan(station2.Nummer)">
                                    @Resources.ButtonEdit
                                </button>
                            </div>
                        }
                    </div>

                }
                
            }

                if (_isNewStation)
                {
                    <EditForm Model="_1newPlan" OnValidSubmit="SaveNewStation">
                    <DataAnnotationsValidator />
                    <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                        <div class="d-flex">
                            <span>Ny @Resources.InputTextStation</span>
                            <div class="flex-grow-1"></div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_1newPlan.NorthDegree"/>
                                <label>Nordlig grader °</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_1newPlan.NorthMinutes"/>
                                <label>Nordlig minutter'</label>
                            </div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_1newPlan.EastDegree"/>
                                <label>Østlig grader °</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_1newPlan.EastMinutes"/>
                                <label>Østlig minutter '</label>
                            </div>
                        </div>
                        <div class="d-flex form-floating">
                            <InputNumber class="form-control" @bind-Value="_1newPlan.Dybde"/>
                            <label >@Resources.InputTextDepth</label>
                        </div>
                        <div class="d-flex form-floating">
                            <InputText class="form-control" @bind-Value="_1newPlan.Analyser"/>
                            <label>@Resources.InputTextMethod</label>
                        </div>
                        <div class="d-flex gap-2 flex-column flex-xxl-row w-100 mt-4">
                            <div class="d-flex flex-grow-1"></div>
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelNewProjectStationPlan">
                                    @Resources.ButtonCancel
                                </button>
                                <button class="btn custom-btn" type="submit">
                                    @Resources.ButtonSave
                                </button>
                            </div>
                        </div>
                        
                        <div class=" text-center">
                            <div class="custom-validation-summary">
                                <ValidationSummary/>
                            </div>
                            @if (!string.IsNullOrEmpty(_errorMessage))
                            {
                                <p class="text-danger">@_errorMessage</p>
                            }
                        </div>
                    </div>
                    </EditForm>
                }


                
        }
        <div class="d-flex flex-row align-self-end justify-content-end w-100 mb-3">
            <div class="d-flex gap-2 flex-column flex-xxl-row w-100 mt-4">
                <button class="btn custom-btn" type="button" disabled="@(EditProjectStationPlanVar && EditProjectPlanVar && !_isExistingPlan)" @onclick="AddStation">
                    @Resources.ButtonAddStation
                </button>
                <div class="d-flex flex-grow-1"></div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public ProjectDto? Project { get; set; }
    [Parameter] public bool EditProjectPlanVar { get; set; }
    [Parameter] public bool EditProjectStationPlanVar { get; set; }
    [Parameter] public EventCallback<bool> EditProjectPlanChanged { get; set; }
    [Parameter] public EventCallback<bool> EditProjectStationPlanChanged { get; set; }
    
    
    
    private bool _isLoading = true;
    private List<UserDto> _users = new List<UserDto>();
    private string? _selectedUser1;
    private EditSamplingPlanDto _newPlan = new();
    private EditSamplingPlanDto _newPlanBackup = new();
    private NewStationDto _1newPlan = new();
    private List<NewStationDto> _newStationPlan = new List<NewStationDto> ();
    private SamplingPlanDto _existingPlan = new();
    private DateOnly _selectedDate;
    private List<StationDto>? _existingStationPlan;
    private List<StationDto>? _orginalStationData;
    private EditContext _editContext;
    private EditContext _editStationPlanContext;
    private EditContext _newStationPlanContext;
    private string? _errorMessage;
    private string? _errorMessageProjectPlan;
    private bool _isExistingPlan;
    private bool _isExistingStationPlan;
    private NewStationDto _newStation = new (); 
    private int? _editingStationIndex = null;
    private NewStationDto _stationBackup;
    private bool _isNewStation = false;


    
    protected override async Task OnInitializedAsync()
    {
        var usersList = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
        _users = usersList?.OrderBy(user => user.FullName).ToList();
        var response = await Http.GetAsync($"/api/Project/{Project.Id:D}/sampling-plan");
        
        if (response.IsSuccessStatusCode)
        {
            _existingPlan = await response.Content.ReadFromJsonAsync<SamplingPlanDto>();
            var existingPlanJason = JsonSerializer.Serialize(_existingPlan);
            _newPlan = JsonSerializer.Deserialize<EditSamplingPlanDto>(existingPlanJason)!;
            _newPlanBackup = BackUp(_newPlan);
            _isExistingPlan = true;
            
            var response2 = await Http.GetAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}/stations");
            if (response2.IsSuccessStatusCode)
            {
                _existingStationPlan = await response2.Content.ReadFromJsonAsync<List<StationDto>>();
                var existingStationJason = JsonSerializer.Serialize(_existingStationPlan );
                _newStationPlan = JsonSerializer.Deserialize<List<NewStationDto>>(existingStationJason)!;
                _isExistingStationPlan = true;
            }
        }
        _editContext = new EditContext(_newPlan);
        _editStationPlanContext = new EditContext(_newStationPlan);
        _newStationPlanContext = new EditContext(_1newPlan);

        _isLoading = false;
    }
    
    
    private async Task OnClickProjectPlan()
    {
        EditProjectPlanVar = true;
        await EditProjectPlanChanged.InvokeAsync(EditProjectPlanVar);
        if (!_isExistingPlan)
        {
            _newPlan.Planlagtfeltdato = DateOnly.FromDateTime(DateTime.Now);
        }

    }

    private async Task EditProjectPlan()
    {
            if (!_isExistingPlan)
            {
                var response = await Http.PostAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan", _newPlan);
                if (response.IsSuccessStatusCode)
                {
                    EditProjectPlanVar = false;
                    _isExistingPlan = false;
                    _newPlan = BackUp(_newPlanBackup);
                    _editContext = new EditContext(_newPlan);
                    StateHasChanged();
                }
                else
                {
                    var serverMessage = await response.Content.ReadAsStringAsync();
                    _errorMessageProjectPlan = !string.IsNullOrWhiteSpace(serverMessage)? serverMessage : Resources.ErrorMessageUnexpected;
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}", _newPlan);
                if (response.IsSuccessStatusCode)
                {
                    EditProjectPlanVar = false;
                    _newPlanBackup = BackUp(_newPlan);
                    
                }
                else
                {
                    var serverMessage = await response.Content.ReadAsStringAsync();
                    _errorMessageProjectPlan = !string.IsNullOrWhiteSpace(serverMessage)? serverMessage : Resources.ErrorMessageUnexpected;
                }
            }
    }
    
    private async Task CancelEditProjectPlan()
    {
        _newPlan = BackUp(_newPlanBackup);
        _editContext = new EditContext(_newPlan);
        StateHasChanged();
        EditProjectPlanVar = false;
        await EditProjectPlanChanged.InvokeAsync(EditProjectPlanVar);
    }
    
       
    
    private async Task OnClickProjectStationPlan(int idx)
    {
        EditProjectStationPlanVar = true;
        await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
        
        _editingStationIndex = idx;
        
        _stationBackup = new NewStationDto
        {
            NorthDegree  = _newStationPlan[idx].NorthDegree,
            NorthMinutes = _newStationPlan[idx].NorthMinutes,
            EastDegree   = _newStationPlan[idx].EastDegree,
            EastMinutes  = _newStationPlan[idx].EastMinutes,
            Dybde        = _newStationPlan[idx].Dybde,
            Analyser     = _newStationPlan[idx].Analyser
        };
        
    }
    
    private async Task SaveNewStation()
    {
        
        var response = await Http.PostAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}/station", _1newPlan);
        if (response.IsSuccessStatusCode)
        {
                
            var newStationPlan = await response.Content.ReadFromJsonAsync<StationDto>();
            if (newStationPlan is not null)
            {
                _existingStationPlan.Add(newStationPlan);
                    
                EditProjectStationPlanVar = false;
                _isExistingStationPlan = true;
                _isNewStation = false;
                _1newPlan = new NewStationDto();
            }
            else
            {
                _errorMessage = "Noe gikk galt, refrech siden for å se oppdatering";
            }
        }
        else
        {
            _errorMessage = Resources.ErrorMessageUnexpected;
        } 
    }

    private void CancelNewProjectStationPlan()
    {
        _isNewStation = false;
    }
    
    
    private async Task SaveEditedStation(int idx)
    {
        
        if (_isExistingStationPlan)
        {
            var response = await Http.PutAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/station/{_existingStationPlan[idx].Id:D}", _newStationPlan[idx]);
            if (response.IsSuccessStatusCode)
            {
                EditProjectStationPlanVar = false;
                _isExistingStationPlan = false;
            }
            else
            {
                _errorMessage = Resources.ErrorMessageUnexpected;
            }
            }
        else
        {
                _errorMessage = Resources.ErrorMessageUnexpected;
        }
        
    }
    
    
    
    private async Task CancelEditProjectStationPlan()
    {
        _editingStationIndex = null;
        EditProjectStationPlanVar = false;
        await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
    }

   

    

    private void AddStation()
    {
        //_newStationPlan.Add(new NewStationDto());
        //_editingStationIndex = _newStationPlan.Count - 1;
        _isNewStation = true;
    }

    private void RemoveStation(int index)
    { 
        _newStationPlan.RemoveAt(index);
    }

    private static T BackUp<T>(T source)
    {
        var json = JsonSerializer.Serialize(source);
        return JsonSerializer.Deserialize<T>(json)!;
    }

}

