@using System.Text.Json
@using SeaEco.Client.Resources
@using SeaEco.Abstractions.Models.Project
@using SeaEco.Abstractions.Models.SamplingPlan
@using SeaEco.Abstractions.Models.Stations
@using SeaEco.Abstractions.Models.User
@inject HttpClient Http


@if (_isLoading)
{
}
else
{
    <div class="d-flex flex-column gap-3 mt-5">
        <EditForm EditContext="_editContext" OnValidSubmit="EditProjectPlan">
            <DataAnnotationsValidator /> 
            <div class="d-flex flex-column gap-3 box-border p-4 min-width-plan">
                <span>Generell informasjon</span>
                <div class="d-flex form-floating">
                    <InputSelect @bind-Value="_newPlan.PlanleggerId" id="user1" class="form-control" disabled="@(!EditProjectPlanVar)">
                        <option value=""></option>
                        @foreach (var user in _users)
                        {
                            <option value="@user.Id">@user.FullName</option>
                        }
                    </InputSelect>
                    <label for="user1">@Resources.InputTextUserProjectPlan</label>
                </div>
                <div class="d-flex form-floating">
                    <InputDate @bind-Value="_newPlan.Planlagtfeltdato" id="date" class="form-control" disabled="@(!EditProjectPlanVar)">
                    </InputDate>
                    <label for="date">@Resources.InputTextPlanedDate</label>
                </div>
                <div class="d-flex justify-content-end w-100">
                    @if (!EditProjectPlanVar)
                    {
                        <button class="btn custom-btn" type="button" @onclick="OnClickProjectPlan" disabled="@(EditProjectStationPlanVar || _isAddingNewStation)">
                            @(_isExistingPlan ? Resources.ButtonEdit : "Opprett")
                        </button>
                    }
                    else
                    {
                        <div class="d-flex flex-column flex-xxl-row w-100">
                            <div class="d-flex flex-grow-1"></div>
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelEditProjectPlan">
                                    @Resources.ButtonCancel
                                </button>
                                <button class="btn custom-btn" type="submit">
                                    @Resources.ButtonSave
                                </button>
                            </div>
                        </div>
                    }
                </div>
                
                <div class=" text-center">
                    <div class="custom-validation-summary">
                        <ValidationSummary/>
                    </div>
                    @if (!string.IsNullOrEmpty(_errorMessageProjectPlan))
                    {
                        <p class="text-danger">@_errorMessageProjectPlan</p>
                    }
                </div>
            </div>
        </EditForm>
        
        @if (_isExistingPlan) 
        {
            foreach(var station in _editStationPlan)
            {
                <div @key="station.Id">
                    @if (_editingStationId == station.Id)
                    {
                        <EditForm Model="station" OnValidSubmit="@(() => SaveEditedStation(station))">
                            <DataAnnotationsValidator/>
                            <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                                <div class="d-flex">
                                    <span>@Resources.InputTextStation @station.Nummer</span>
                                    <div class="flex-grow-1"></div>
                                    @if (EditProjectStationPlanVar)
                                    {
                                        <span class="bi bi-x-circle show cursor" @onclick="@(() => RemoveStation(station.Id))">
                                        </span>
                                    }
                                </div>

                                <div class="d-flex flex-xxl-row flex-column gap-3">
                                    <div class="d-flex form-floating">
                                        <InputNumber class="form-control" id=@($"positionNg_{station.Nummer}")  @bind-Value="station.NorthDegree" disabled="@(!EditProjectStationPlanVar)"/>
                                        <label for="positionNg_@station.Nummer">Nordlig grader °</label>
                                    </div>
                                    <div class="d-flex form-floating">
                                        <InputNumber class="form-control" id=@($"positionNm_{station.Nummer}") @bind-Value="station.NorthMinutes" disabled="@(!EditProjectStationPlanVar)"/>
                                        <label for="positionNm_@station.Nummer">Nordlig minutter '</label>
                                    </div>
                                </div>
                                <div class="d-flex flex-xxl-row flex-column gap-3">
                                    <div class="d-flex form-floating">
                                        <InputNumber class="form-control" id=@($"positionEg_{station.Nummer}")  @bind-Value="station.EastDegree" disabled="@(!EditProjectStationPlanVar)"/>
                                        <label for="positionEg_@station.Nummer">Østlig grader °</label>
                                    </div>
                                    <div class="d-flex form-floating">
                                        <InputNumber class="form-control" id=@($"positionEm_{station.Nummer}") @bind-Value=" station.EastMinutes" disabled="@(!EditProjectStationPlanVar)"/>
                                        <label for="positionEm_@station.Nummer">Østlig minutter '</label>
                                    </div>
                                </div>
                                <div class="d-flex form-floating">
                                    <InputNumber class="form-control" id=@($"depth_{station.Nummer}") @bind-Value="station.Dybde" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="depth_@station.Nummer">@Resources.InputTextDepth</label>
                                </div>
                                <div class="d-flex form-floating">
                                    <InputText class="form-control" id=@($"method_{station.Nummer}") @bind-Value="station.Analyser" disabled="@(!EditProjectStationPlanVar)"/>
                                    <label for="method_@station.Nummer">@Resources.InputTextMethod</label>
                                </div>
                                <div class="d-flex flex-column flex-xxl-row w-100">
                                    <div class="d-flex flex-grow-1"></div>
                                    <div class="d-flex gap-2 justify-content-center">
                                        <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelEditProjectStationPlan">
                                            @Resources.ButtonCancel
                                        </button>
                                        <button class="btn custom-btn" type="submit">
                                            @Resources.ButtonSave
                                        </button>
                                    </div>
                                </div>

                                <div class=" text-center">
                                    <div class="custom-validation-summary">
                                        <ValidationSummary/>
                                    </div>
                                    @if (!string.IsNullOrEmpty(_errorMessage))
                                    {
                                        <p class="text-danger">@_errorMessage</p>
                                    }
                                </div>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        
                    <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                        <div class="d-flex">
                            <span>@Resources.InputTextStation @station.Nummer</span>
                            <div class="flex-grow-1"></div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputText class="form-control" id=@($"positionNg_{station}")  @bind-Value="station.KoordinatNord" disabled/>
                                <label for="positionNg_@station">Nordlig grader °</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputText class="form-control" id=@($"positionEg_{station}")  @bind-Value="station.KoordinatOst" disabled/>
                                <label for="positionEg_@station">Østlig grader °</label>
                            </div>
                        </div>
                        <div class="d-flex form-floating">
                            <InputNumber class="form-control" id=@($"depth_{station}") @bind-Value="station.Dybde" disabled/>
                            <label for="depth_@station">@Resources.InputTextDepth</label>
                        </div>
                        <div class="d-flex form-floating">
                            <InputText class="form-control" id=@($"method_{station}") @bind-Value="station.Analyser" disabled/>
                            <label for="method_@station">@Resources.InputTextMethod</label>
                        </div>
                        
                            <div class="d-flex">
                                <div class="d-flex flex-grow-1"></div>
                                <button class="btn custom-btn" type="button" @onclick="() => OnClickProjectStationPlan(station)" disabled="@(EditProjectStationPlanVar || EditProjectPlanVar || _isAddingNewStation)">
                                    @Resources.ButtonEdit
                                </button>
                            </div>
                        
                    </div>
                }
                </div>
            }

            if (_isAddingNewStation)
                {
                    <EditForm Model="_newStationPlan" OnValidSubmit="SaveNewStation">
                    <DataAnnotationsValidator />
                    <div class="d-flex flex-column gap-3 mt-3 box-border p-4">
                        <div class="d-flex">
                            <span>Ny @Resources.InputTextStation</span>
                            <div class="flex-grow-1"></div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_newStationPlan.NorthDegree"/>
                                <label>Nordlig grader °</label>
                                
                            </div>
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_newStationPlan.NorthMinutes"/>
                                <label>Nordlig minutter'</label>
                            </div>
                        </div>
                        <div class="d-flex flex-xxl-row flex-column gap-3">
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_newStationPlan.EastDegree"/>
                                <label>Østlig grader °</label>
                            </div>
                            <div class="d-flex form-floating">
                                <InputNumber class="form-control" @bind-Value="_newStationPlan.EastMinutes"/>
                                <label>Østlig minutter '</label>
                            </div>
                        </div>
                        <div class="d-flex form-floating">
                            <InputNumber class="form-control" @bind-Value="_newStationPlan.Dybde"/>
                            <label >@Resources.InputTextDepth</label>
                        </div>
                        <div class="d-flex form-floating">
                            <InputText class="form-control" @bind-Value="_newStationPlan.Analyser"/>
                            <label>@Resources.InputTextMethod</label>
                        </div>
                        <div class="d-flex flex-column flex-xxl-row w-100">
                            <div class="d-flex flex-grow-1"></div>
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn custom-outline-secondary-btn" type="button" @onclick="CancelNewProjectStationPlan">
                                    @Resources.ButtonCancel
                                </button>
                                <button class="btn custom-btn" type="submit">
                                    @Resources.ButtonSave
                                </button>
                            </div>
                        </div>
                        
                        <div class=" text-center">
                            <div class="custom-validation-summary">
                                <ValidationSummary/>
                            </div>
                            @if (!string.IsNullOrEmpty(_errorMessage))
                            {
                                <p class="text-danger">@_errorMessage</p>
                            }
                        </div>
                    </div>
                    </EditForm>
                }
        }
        <div class="d-flex mb-5 mt-3">
                <button class="btn custom-btn" type="button" disabled="@(EditProjectStationPlanVar || EditProjectPlanVar || !_isExistingPlan || _isAddingNewStation)" @onclick="AddStation">
                    @Resources.ButtonAddStation
                </button>
                <div class="d-flex flex-grow-1"></div>
        </div>
    </div>
}


@code {
    [Parameter] public ProjectDto? Project { get; set; }
    [Parameter] public bool EditProjectPlanVar { get; set; }
    [Parameter] public bool EditProjectStationPlanVar { get; set; }
    [Parameter] public EventCallback<bool> EditProjectPlanChanged { get; set; }
    [Parameter] public EventCallback<bool> EditProjectStationPlanChanged { get; set; }
    
    private bool _isLoading = true;
    private List<UserDto> _users = new ();
    private string? _selectedUser1;
    
    //General plan
    private EditSamplingPlanDto _newPlan = new();
    private EditSamplingPlanDto _newPlanBackup = new();
    private SamplingPlanDto _existingPlan = new();
    private DateOnly _selectedDate;
    private EditContext _editContext;
    private bool _isExistingPlan;
    private string? _errorMessageProjectPlan;
    
    //New station plan
    private NewStationDto _newStationPlan = new();
    private bool _isAddingNewStation = false;
    private EditContext _newStationPlanContext;
    
    //Edit station plan
    private List<UpdateStationDto> _editStationPlan = new ();
    private List<UpdateStationDto>? _existingStationPlan;
    private EditContext _editStationPlanContext;
    private Guid? _editingStationId = null;
    private bool _isExistingStationPlan;
    private List<UpdateStationDto> _editStationPlanBackup = new();
    
    private string? _errorMessage;
    
    
    protected override async Task OnInitializedAsync()
    {
        var usersList = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
        _users = usersList?.OrderBy(user => user.FullName).ToList();
        var response = await Http.GetAsync($"/api/Project/{Project.Id:D}/sampling-plan");
        
        if (response.IsSuccessStatusCode)
        {
            _existingPlan = await response.Content.ReadFromJsonAsync<SamplingPlanDto>();
            var existingPlanJason = JsonSerializer.Serialize(_existingPlan);
            _newPlan = JsonSerializer.Deserialize<EditSamplingPlanDto>(existingPlanJason)!;
            _newPlanBackup = BackUp(_newPlan);
            _isExistingPlan = true;
            
            var response2 = await Http.GetAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}/stations");
            if (response2.IsSuccessStatusCode)
            {
                _existingStationPlan = await response2.Content.ReadFromJsonAsync<List<UpdateStationDto>>();
                var existingStationJason = JsonSerializer.Serialize(_existingStationPlan );
                _editStationPlan = JsonSerializer.Deserialize<List<UpdateStationDto>>(existingStationJason)!;

                _editStationPlan?.Sort((a, b) => a.Nummer.CompareTo(b.Nummer));

                _editStationPlanBackup = BackUp(_editStationPlan);
                _isExistingStationPlan = true;
            }
        }
        _editContext = new EditContext(_newPlan);
        _editStationPlanContext = new EditContext(_editStationPlan);
        _newStationPlanContext = new EditContext(_newStationPlan);

        _isLoading = false;
    }
    
    //General plan
    
    private async Task OnClickProjectPlan()
    {
        EditProjectPlanVar = true;
        await EditProjectPlanChanged.InvokeAsync(EditProjectPlanVar);
    }

    private async Task EditProjectPlan()
    {
            if (!_isExistingPlan)
            {
                var response = await Http.PostAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan", _newPlan);
                if (response.IsSuccessStatusCode)
                {
                    var createdPlan = await response.Content.ReadFromJsonAsync<SamplingPlanDto>();
                    _existingPlan = createdPlan;
                    EditProjectPlanVar = false;
                    _isExistingPlan = true;
                    _newPlanBackup = BackUp(_newPlan);
                    

                }
                else
                {
                    var serverMessage = await response.Content.ReadAsStringAsync();
                    _errorMessageProjectPlan = !string.IsNullOrWhiteSpace(serverMessage)? serverMessage : Resources.ErrorMessageUnexpected;
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}", _newPlan);
                if (response.IsSuccessStatusCode)
                {
                    EditProjectPlanVar = false;
                    _newPlanBackup = BackUp(_newPlan);
                    
                }
                else
                {
                    var serverMessage = await response.Content.ReadAsStringAsync();
                    _errorMessageProjectPlan = !string.IsNullOrWhiteSpace(serverMessage)? serverMessage : Resources.ErrorMessageUnexpected;
                }
            }
    }
    
    private async Task CancelEditProjectPlan()
    {
        _newPlan = BackUp(_newPlanBackup);
        _editContext = new EditContext(_newPlan);
        StateHasChanged();
        EditProjectPlanVar = false;
        await EditProjectPlanChanged.InvokeAsync(EditProjectPlanVar);
    }
    
       
    //New station plan
    
    private void AddStation()
    {
        _isAddingNewStation = true;
    }
    
    private async Task SaveNewStation()
    {
        
        var response = await Http.PostAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/{_existingPlan.Id:D}/station", _newStationPlan);
        if (response.IsSuccessStatusCode)
        {
            var newStationPlan = await response.Content.ReadFromJsonAsync<UpdateStationDto>();
            if (newStationPlan != null)
            {
                _editStationPlan.Add(newStationPlan);  
                _editStationPlanBackup.Add(BackUp(newStationPlan));
                EditProjectStationPlanVar = false;
                _isExistingStationPlan = true;
                _newStationPlan = new NewStationDto();
                _isAddingNewStation = false;
                StateHasChanged();
                await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
            }
            else
            {
                _errorMessage = "Noe gikk galt, refrech siden for å se oppdatering";
            }
        }
        else
        {
            _errorMessage = Resources.ErrorMessageUnexpected;
        } 
    }

    private void CancelNewProjectStationPlan()
    {
        _isAddingNewStation = false;
        _newStationPlan = new NewStationDto();
    }
    
    
    //Edit station plan
    
    private async Task OnClickProjectStationPlan(UpdateStationDto station)
    {
        EditProjectStationPlanVar = true;
        await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
        _editingStationId = station.Id;
    }
    
    private async Task SaveEditedStation(UpdateStationDto station)
    {
            var response = await Http.PutAsJsonAsync($"/api/Project/{Project.Id:D}/sampling-plan/station/{station.Id:D}", station);
            if (response.IsSuccessStatusCode)
            {
                var idx = _editStationPlanBackup.FindIndex(x => x.Id == station.Id);
                if (idx >= 0)
                { 
                    var backupStation = _editStationPlan.FirstOrDefault(backupStation => backupStation.Id == station.Id); 
                    if (backupStation != null) 
                    {
                        _editStationPlanBackup[idx] = BackUp(backupStation);
            
                    }
                }
                
                _editingStationId = null;
                EditProjectStationPlanVar = false;
                _isExistingStationPlan = false;
                StateHasChanged();
            }
            else
            {
                _errorMessage = Resources.ErrorMessageUnexpected;
            }
    }
    
    private async Task CancelEditProjectStationPlan()
    {
    var idx = _editStationPlan.FindIndex(station => station.Id == _editingStationId);
    if (idx >= 0)
    { 
        var backupStation = _editStationPlanBackup.FirstOrDefault(backupStation => backupStation.Id == _editingStationId); 
        if (backupStation != null) 
        {
            _editStationPlan[idx] = BackUp(backupStation);
            
        }
    }
        _editingStationId = null;
        EditProjectStationPlanVar = false;
        await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
    }

    private async Task RemoveStation(Guid stationId)
    { 
        var response = await Http.DeleteAsync($"/api/Project/{Project.Id:D}/sampling-plan/station/{stationId:D}");
        if (response.IsSuccessStatusCode)
        {
            _editStationPlan.RemoveAll(s => s.Id == stationId);
            _editingStationId = null;
            EditProjectStationPlanVar = false;
            await EditProjectStationPlanChanged.InvokeAsync(EditProjectStationPlanVar);
        }
        else
        {
            _errorMessage = Resources.ErrorMessageUnexpected;
        }
    }

    private static T BackUp<T>(T source)
    {
        var json = JsonSerializer.Serialize(source);
        return JsonSerializer.Deserialize<T>(json)!;
    }

}

