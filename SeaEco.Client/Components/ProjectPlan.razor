@using SeaEco.Client.Resources
@using SeaEco.Abstractions.Models.Project
@using SeaEco.Abstractions.Models.User
@inject HttpClient Http


@if (_isLoading)
{
}
else
{
    if (_stationData==null)
    {
        <div class="d-flex flex-column gap-3 mt-3">
            <div class="d-flex justify-content-center">
                @Resources.PageProjectPlanNoPlan
            </div>
            <button class="btn btn-outline-secondary filter-button" type="button" @onclick="OnClickProjectPlan">
                @Resources.ButtonAddNewProjectPlan
            </button>
        </div>
    }
    else
    {
        <div class="d-flex flex-column gap-3 mt-3">
            <span>@Resources.InputTextUserProjectPlan</span>
            <div class="d-flex flex-column gap-3">


                <div class="d-flex form-floating">
                    <InputSelect @bind-Value="_selectedUser1" id="user1" class="form-control" disabled="@(!_editProjectPlan)">
                        <option value=""></option>
                        @foreach (var user in _users)
                        {
                            <option value="@user.FullName">@user.FullName</option>
                        }
                    </InputSelect>
                    <label for="user1">@Resources.InputTextUser1ProjectPlan</label>
                </div>
                <div class="d-flex form-floating">
                    <InputSelect @bind-Value="_selectedUser2" id="user2" class="form-control" disabled="@(!_editProjectPlan)">
                        <option value=""></option>
                        @foreach (var user in _users)
                        {
                            <option value="@user.FullName">@user.FullName</option>
                        }
                    </InputSelect>
                    <label for="user2">@Resources.InputTextUser2ProjectPlan</label>
                </div>
                <div class="d-flex form-floating">
                    <InputSelect @bind-Value="_selectedUser3" id="user3" class="form-control" disabled="@(!_editProjectPlan)">
                        <option value=""></option>
                        @foreach (var user in _users)
                        {
                            <option value="@user.FullName">@user.FullName</option>
                        }
                    </InputSelect>
                    <label for="user3">@Resources.InputTextUser3ProjectPlan</label>
                </div>
            </div>
            
            @foreach (var station in _stationData)
            {
                <div class="d-flex flex-column gap-3 mt-3">
                    <div class="d-flex">
                        <span>@Resources.InputTextStation @_stationData.IndexOf(station)</span>
                        <div class="flex-grow-1"></div>
                        @if (_editProjectPlan)
                        {
                            <span class="bi bi-x-circle show " style="cursor: pointer;" @onclick="@(() => RemoveStation(_stationData.IndexOf(station)))">
                            </span>
                        }
                    </div>

                    <div class="d-flex flex-row gap-3">
                        <div class="d-flex form-floating">
                            <InputText class="form-control" id=@($"positionN_{station}")  @bind-Value="station.PositionN" disabled="@(!_editProjectPlan)"/>
                            <label for="positionN_@station">@Resources.InputTextPositionN</label>
                        </div>
                        <div class="d-flex form-floating">
                            <InputText class="form-control" id=@($"positionS_{station}") @bind-Value="station.PositionS" disabled="@(!_editProjectPlan)"/>
                            <label for="positionS_@station">@Resources.InputTextPositionS</label>
                        </div>
                    </div>
                    <div class="d-flex form-floating">
                        <InputText class="form-control" id=@($"depth_{station}") @bind-Value="station.Depth" disabled="@(!_editProjectPlan)"/>
                        <label for="depth_@station">@Resources.InputTextDepth</label>
                    </div>
                    <div class="d-flex form-floating">
                        <InputText class="form-control" id=@($"method_{station}") @bind-Value="station.Method" disabled="@(!_editProjectPlan)"/>
                        <label for="method_@station">@Resources.InputTextMethod</label>
                    </div>
                </div>
            }
            <div class="d-flex flex-row align-self-end justify-content-end w-100 mb-3">
                @if (!_editProjectPlan)
                {
                    <button class="btn btn-outline-secondary filter-button" type="button" @onclick="OnClickProjectPlan">
                        @Resources.ButtonEdit
                    </button>
                }
                else
                {
                    <div class="d-flex gap-2 flex-column flex-xxl-row w-100">
                        <button class="btn btn-outline-secondary filter-button" type="button" @onclick="AddStation">
                            @Resources.ButtonAddStation
                        </button>
                        <div class="d-flex flex-grow-1"></div>
                        <div class="d-flex gap-2 justify-content-center">
                            <button class="btn btn-outline-secondary filter-button" type="button" @onclick="CancelEditProjectPlan">
                                @Resources.ButtonCancel
                            </button>
                            <button class="btn btn-outline-secondary filter-button" type="button" @onclick="EditProjectPlan">
                                @Resources.ButtonSave
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}


@code {
    [Parameter] public ProjectDto? Project { get; set; }

    private bool _editProjectPlan;
    private bool _isLoading = true;
    private int _addedUser = 1;
    private List<UserDto> _users = new List<UserDto>();
    private string? _selectedUser1;
    private string? _selectedUser2;
    private string? _selectedUser3;
    private List<StationData>? _stationData;
    private List<StationData>? _orginalStationData;

    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;
        
        var usersList = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
        _users = usersList?.OrderBy(user => user.FullName).ToList();
    }

    private void OnClickProjectPlan()
    {
        _editProjectPlan = true;
        
        if (_stationData==null)
        {
            _stationData = new List<StationData>
            {
                new StationData{ Method = "Parameter I, II og III" }
            };
        
            int count = (Project?.Antallstasjoner ?? 0);
            for (int i = 1; i < count; i++)
            {
                _stationData.Add(new StationData { Method = "Parameter I, II og III" });
            }

        }
    }

    private void EditProjectPlan()
    {
        //_editProjectPlan = false;
    }

    private void CancelEditProjectPlan()
    {
        _editProjectPlan = false;
        _stationData = _orginalStationData;
    }

    private void AddStation()
    {
        _stationData.Add(new StationData{ Method = "Parameter I, II og III" });
    }

    private void RemoveStation(int index)
    {
        _stationData.RemoveAt(index);
    }

    public class StationData
    {
        public string? PositionN { get; set; }
        public string? PositionS { get; set; }
        public string? Depth { get; set; }
        public string? Method { get; set; }
    }

}

