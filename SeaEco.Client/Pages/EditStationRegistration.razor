@page "/project/{ProjectId:guid}/station/{StationId:guid}/edit-survey/{SurveyId:guid}"
@using Microsoft.AspNetCore.Authorization
@using SeaEco.Abstractions.Enums
@using SeaEco.Abstractions.Enums.Bsensorisk
@using SeaEco.Abstractions.Extensions
@using SeaEco.Abstractions.Models.BSurvey
@using SeaEco.Abstractions.Models.Bundersokelse
@using SeaEco.Abstractions.Models.Image
@using SeaEco.Abstractions.ValueObjects
@using SeaEco.Services.NavigationLockService
@inject NavigationLockService NavigationLockService
@inject HttpClient Http
@inject IJSRuntime Js
@inject NavigationManager Navigation
@attribute [Authorize]


<div class="d-flex justify-content-center mb-5 mt-4">
    <h2>Stasjonsredigering</h2>
</div>

@if (_isLoaded)
{
    <div id="div1" class="content-div active">
        @if (_surveyDto != null && _surveyDto.BStation != null)
        {
            <div class="position-depth-container">
                <div class="form-floating mb-3">
                    <InputText id="position_n_deg" class="form-control"
                               @bind-Value="_coordinateNorthGrade"
                               @oninput='e => { _coordinateNorthGrade = e.Value?.ToString() ?? ""; UpdateCoordinateNorth(); }'
                               placeholder="Grader"/>
                    <label for="position_n_deg">Nordlig grader</label>
                </div>
        
                <div class="form-floating mb-3">
                    <InputText id="position_n_min" class="form-control"
                               @bind-Value="_coordinateNorthMinute"
                               @oninput='e => { _coordinateNorthMinute = e.Value?.ToString() ?? ""; UpdateCoordinateNorth(); }'
                               placeholder="Minutter"/>
                    <label for="position_n_min">Nordlig minutter</label>
                </div>
        
        
                <div class="form-floating mb-3">
                    <InputText id="position_e_deg" class="form-control"
                               @bind-Value="_coordinateEastGrade"
                               @oninput='e => { _coordinateEastGrade = e.Value?.ToString() ?? ""; UpdateCoordinateEast(); }'
                               placeholder="Grader"/>
                    <label for="position_e_deg">Østlig grader</label>
                </div>
        
                <div class="form-floating mb-3">
                    <InputText id="position_e_min" class="form-control"
                               @bind-Value="_coordinateEastMinute"
                               @oninput='e => { _coordinateEastMinute = e.Value?.ToString() ?? ""; UpdateCoordinateEast(); }'
                               placeholder="Minutter"/>
                    <label for="position_e_min">Østlig minutter</label>
                </div>
        
                <div class="form-floating mb-3">
                    <InputNumber id="depth" class="form-control" @bind-Value="_surveyDto.BStation.Dybde" placeholder="M"/>
                    <label for="depth">Dybde</label>
                </div>
        
                <div class="position-depth-button-container">
                    <button class="btn btn-outline-primary clear-data @(_surveyDto.BStation.Dybde == 0 ? "active" : "")"
                            @onclick="() => ClearPositionAndDepth(0)">
                        Annen posisjon og dybde
                    </button>
                </div>

                <div class="form-floating mb-3">
                    <InputText id="analyser" class="form-control" @bind-Value="_surveyDto.BStation.Analyser" placeholder="Analyser"/>
                    <label for="analyser">Analyser</label>
                </div>
            </div>
        }

        <div class="equipment-container">
            @if (_surveyDto?.AntallGrabbhugg <= 3 && _surveyDto.AntallGrabbhugg >= 0)
            {
                <div class="form-floating mb-3">
                    <InputSelect id="equip-1" class="form-control" @bind-Value="_surveyDto.AntallGrabbhugg">
                        <option value="">Velg antall grabbhugg</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                    </InputSelect>
                    <label for="equip-1">Antall grabbhugg</label>
                </div>
            }
            
            @if (_surveyDto.GrabbhastighetGodkjent == false || _surveyDto.GrabbhastighetGodkjent == true)
            {
                <div class="checkbox-3-container">
                    <label class="custom-checkbox" for="equip-2">
                        <span class="custom-label">Godkjent grabbhastighet</span>
                        <input id="equip-2" type="checkbox" @bind="_surveyDto.GrabbhastighetGodkjent" />
                        <span class="custom-checkmark"></span>
                    </label>
                </div>
            }
        </div>
    </div>

    <div id="div2" class="content-div">
        <div class="typeRadio-container">
            @if (_selectBunnType != "")
            {
                <h5>Bunntype: </h5>

                <div class="cntr">
                    <input type="radio"
                           name="bunntype"
                           id="cbx1"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectBunnType = "blot";
                                          _selectSensorisk = "";
                                          if (_surveyDto.BlotbunnId == null)
                                          {
                                              _surveyDto.BlotbunnId = Guid.NewGuid();
                                              _surveyDto.HardbunnId = null;
                                              _surveyDto.BHardBase = null;
                                              
                                              if (_surveyDto.BSoftBase == null)
                                              {
                                                  _surveyDto.BSoftBase = new BSoftBaseDto
                                                  {
                                                      Id = _surveyDto.BlotbunnId.Value,
                                                      Leire = 0f,
                                                      Grus = 0f,
                                                      Sand = 0f,
                                                      Silt = 0f,
                                                      Skjellsand = 0f
                                                  };
                                              }    
                                          }
                                          if (_surveyDto.BSediment == null && _surveyDto.BSensorisk == null)
                                          {
                                              _surveyDto.SedimentId = Guid.NewGuid();
                                              _surveyDto.BSediment = new BSedimentDto
                                              {
                                                  Id = _surveyDto.SedimentId.Value,
                                                  Ph = 0,
                                                  Eh = 0,
                                                  Temperatur = 0
                                              };
                                              _surveyDto.SensoriskId = Guid.NewGuid();
                                              _surveyDto.BSensorisk = new BSensoriskDto
                                              {
                                                  Id = _surveyDto.SensoriskId.Value
                                              };
                                          }
                                          else if (_surveyDto.BSediment == null && _surveyDto.BSensorisk != null)
                                          {
                                              _surveyDto.SedimentId = Guid.NewGuid();
                                              _surveyDto.BSediment = new BSedimentDto
                                              {
                                                  Id = _surveyDto.SedimentId.Value,
                                                  Ph = 0,
                                                  Eh = 0,
                                                  Temperatur = 0
                                              };
                                          }
                                      })"
                           checked="@(_selectBunnType == "blot")" />
                    <label for="cbx1" class="cbx"></label>
                    <label for="cbx1" class="lbl">Bløt</label>
                </div>    
                
                <div class="cntr">
                    <input type="radio"
                           name="bunntype"
                           id="cbx2"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectBunnType = "hard";
                                          _selectSensorisk = "none";
                                          if (_surveyDto.HardbunnId == null)
                                          {
                                              _surveyDto.HardbunnId = Guid.NewGuid();
                                              _surveyDto.BlotbunnId = null;
                                              _surveyDto.BSoftBase = null;
                                          }
                                          if (_surveyDto.BHardBase == null)
                                          {
                                              _surveyDto.BHardBase = new BHardBaseDto
                                              {
                                                  Id = _surveyDto.HardbunnId.Value,
                                                  Fjellbunn = 0f,
                                                  Steinbunn = 0f
                                              };
                                          }
                                      })"
                           checked="@(_selectBunnType == "hard")" />
                    <label for="cbx2" class="cbx"></label>
                    <label for="cbx2" class="lbl">Hard</label>
                </div>
            }
        </div>

        <div id="sensoryRadio" class="sensoryRadio-container">
            @if (_selectSensorisk != "" || _selectSensorisk == "none")
            {
                <h5>Er sensorisk utført?</h5>

                <div class="cntr">
                    <input type="radio"
                           name="sensorisk"
                           id="cbx3"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectSensorisk = "ja";
                                          if (_surveyDto.BSensorisk == null && _surveyDto.SensoriskId == null)
                                          {
                                              _surveyDto.SedimentId = null;
                                              _surveyDto.BSediment = null;
                                              _surveyDto.SensoriskId = Guid.NewGuid();
                                              _surveyDto.BSensorisk = new BSensoriskDto
                                              {
                                                  Id = _surveyDto.SensoriskId.Value
                                              };
                                          }
                                      })"
                           checked="@(_selectSensorisk == "ja")"/>
                    <label for="cbx3" class="cbx"></label>
                    <label for="cbx3" class="lbl">Ja</label>
                </div>

                <div class="cntr">
                    <input type="radio"
                           name="sensorisk"
                           id="cbx4"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectSensorisk = "nei";
                                          if (_surveyDto.BSensorisk != null && _surveyDto.SensoriskId != null)
                                          {
                                              _surveyDto.SedimentId = null;
                                              _surveyDto.BSediment = null;
                                              _surveyDto.SensoriskId = null;
                                              _surveyDto.BSensorisk = null;
                                          }
                                      })"
                           checked="@(_selectSensorisk == "nei")"/>
                    <label for="cbx4" class="cbx"></label>
                    <label for="cbx4" class="lbl">Nei</label>
                </div> 
            }
        </div>

        <div id="sensoryInfo" class="sensoryInfo-container">
            <div class="sensoryData">
                @if (_surveyDto.BSediment != null)
                {
                    <div class="form-floating mb-3" id="sensoryDataSoft_1">
                        <InputNumber id="ProvePh" class="form-control" @bind-Value="_surveyDto.BSediment.Ph" placeholder="pH"/>
                        <label for="ProvePh">pH</label>
                    </div>

                    <div class="form-floating mb-3" id="sensoryDataSoft_2">
                        <InputNumber id="ProveEh" class="form-control" @bind-Value="_surveyDto.BSediment.Eh" placeholder="Eh"/>
                        <label for="ProveEh">EH</label>
                    </div>

                    <div class="form-floating mb-3" id="sensoryDataSoft_3">
                        <InputNumber id="ProveTemp" class="form-control" @bind-Value="_surveyDto.BSediment.Temperatur" placeholder="Temp"/>
                        <label for="ProveTemp">Temp</label>
                    </div>
                }

                @if (_surveyDto.BSensorisk != null)
                {
                    <div class="form-floating mb-3">
                        <InputSelect id="GrabbVolum" class="form-select" @bind-Value="_surveyDto.BSensorisk.Grabbvolum">
                            <option value="" disabled>Velg grabbvolum</option>
                            @foreach (Grabbvolum g in Enum.GetValues(typeof(Grabbvolum)))
                            {
                                <option value="@((int)g)">@g.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="GrabbVolum">GrabbVolum</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="Tykkelse" class="form-select" @bind-Value="_surveyDto.BSensorisk.Tykkelseslamlag">
                            <option value="" disabled>Velg tykkelseslamlag</option>
                            @foreach (Tykkelseslamlag t in Enum.GetValues(typeof(Tykkelseslamlag)))
                            {
                                <option value="@((int)t)">@t.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="Tykkelse">Tykkelseslamlag</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="Gassbobler" class="form-select" @bind-Value="_surveyDto.BSensorisk.Gassbobler">
                            <option value="" disabled>Velg gassbobler</option>
                            @foreach (Gassbobler gass in Enum.GetValues(typeof(Gassbobler)))
                            {
                                <option value="@((int)gass)">@gass.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="Gassbobler">Gassbobler</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="Farge" class="form-select" @bind-Value="_surveyDto.BSensorisk.Farge">
                            <option value="" disabled>Velg farge</option>
                            @foreach (Farge f in Enum.GetValues(typeof(Farge)))
                            {
                                <option value="@((int)f)">@f.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="Farge">Farge</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="Lukt" class="form-select" @bind-Value="_surveyDto.BSensorisk.Lukt">
                            <option value="" disabled>Velg lukt</option>
                            @foreach (Lukt l in Enum.GetValues(typeof(Lukt)))
                            {
                                <option value="@((int)l)">@l.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="Lukt">Lukt</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="Konsistens" class="form-select" @bind-Value="_surveyDto.BSensorisk.Konsistens">
                            <option value="" disabled>Velg konsistens</option>
                            @foreach (Konsistens k in Enum.GetValues(typeof(Konsistens)))
                            {
                                <option value="@((int)k)">@k.GetDescription()</option>
                            }
                        </InputSelect>
                        <label for="Konsistens">Konsistens</label>
                    </div>
                }
            </div>
        </div>

        <div class="sedimentType-container" id="sedimentType">
            @if (_surveyDto.BHardBase != null)
            {
                <div class="hardSediment-container" id="hardSediment">
                    <h5>Bunntype:</h5>

                    <div class="checkbox-container">
                        <button class="toggle-btn" data-level="@(_surveyDto.BHardBase?.Steinbunn.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => ToggleZeroOneValue(_surveyDto.BHardBase, nameof(_surveyDto.BHardBase.Steinbunn))"
                                disabled="@(_surveyDto.BHardBase == null || _surveyDto.BHardBase.Fjellbunn == 1f)">
                            Steinbunn
                        </button>

                        <button class="toggle-btn" data-level="@(_surveyDto.BHardBase?.Fjellbunn.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => ToggleZeroOneValue(_surveyDto.BHardBase, nameof(_surveyDto.BHardBase.Fjellbunn))"
                                disabled="@(_surveyDto.BHardBase == null || _surveyDto.BHardBase.Steinbunn == 1f)">
                            Fjellbunn
                        </button>
                    </div>
                </div>
            }

            @if (_surveyDto.BSoftBase != null)
            {
                <div class="softSediment-container" id="softSediment">
                    <h5>Sedimenttype:</h5>

                    <div class="checkbox-container">
                        <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Sand.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Sand))"
                                disabled="@(_surveyDto.BSoftBase == null)">
                            Sand
                        </button>
                        <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Leire.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Leire))"
                                disabled="@(_surveyDto.BSoftBase == null)">
                            Leire
                        </button>
                        <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Silt.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Silt))"
                                disabled="@(_surveyDto.BSoftBase == null)">
                            Silt
                        </button>
                        <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Grus.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Grus))"
                                disabled="@(_surveyDto.BSoftBase == null)">
                            Grus
                        </button>
                        <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Skjellsand.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                                @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Skjellsand))"
                                disabled="@(_surveyDto.BSoftBase == null)">
                            Skjellsand
                        </button>
                    </div>
                </div>
            }
        </div>
        
        <div class="picture-container">
            <div class="picture-card">
                <h5>Usilt: </h5>
                
                <InputFile
                    @key="usiltKey"
                    OnChange="OnUsiltImageSelect"
                    accept="image/*"
                    class="picture-button"/>
                
                <button class="btn btn-danger"
                        @onclick="RemoveUsiltImage"
                        disabled="@(usiltPreviewUrl is null)">
                    Fjern
                </button>
                
                @if (usiltPreviewUrl != null)
                {
                    <div class="mt-2">
                        <img src="@usiltPreviewUrl" style="max-width:200px; max-height:200px;"/>
                    </div>
                }
            </div>
            
            <div class="picture-card">
                <h5>Silt: </h5>

                <InputFile
                    @key="siltKey"
                    OnChange="OnSiltImageSelect"
                    accept="image/*"
                    class="picture-button" />

                <button class="btn btn-danger"
                        @onclick="RemoveSiltImage"
                        disabled="@(siltPreviewUrl is null)">
                    Fjern
                </button>

                @if (siltPreviewUrl != null)
                {
                    <div class="mt-2">
                        <img src="@siltPreviewUrl" style="max-width:200px; max-height:200px;" />
                    </div>
                }
            </div>
        </div>
    </div>

    <div id="div3" class="content-div">
        <div class="checkbox-1-container">
            @if (_surveyDto.Beggiatoa || _surveyDto.Forrester || _surveyDto.Fekalier)
            {
                <label class="custom-checkbox" for="beggiatoa">
                    <span class="custom-label">Beggiatoa</span>
                    <input type="checkbox" id="beggiatoa" @bind="_surveyDto.Beggiatoa"/>
                    <span class="custom-checkmark"></span>
                </label>
                
                <label class="custom-checkbox" for="forrester">
                    <span class="custom-label">Forrester</span>
                    <input type="checkbox" id="forrester" @bind="_surveyDto.Forrester"/>
                    <span class="custom-checkmark"></span>
                </label>
                
                <label class="custom-checkbox" for="fekalier">
                    <span class="custom-label">Fekalier</span>
                    <input type="checkbox" id="fekalier" @bind="_surveyDto.Fekalier"/>
                    <span class="custom-checkmark"></span>
                </label>
            }
        </div>

        <div class="animalRadio-container">
            @if (_selectDyr != "")
            {
                <h5>Dyr: </h5>

                <div class="cntr">
                    <input type="radio"
                           name="dyr"
                           id="cbx5"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectDyr = "ja";
                                          if (_surveyDto.BAnimal == null)
                                          {
                                              _surveyDto.BAnimal = new BAnimalDto();
                                              _surveyDto.BAnimal.Arter = "";
                                          }
                                      })"
                           checked="@(_selectDyr == "ja")"/>
                    <label for="cbx5" class="cbx"></label>
                    <label for="cbx5" class="lbl">Ja</label>
                </div>

                <div class="cntr">
                    <input type="radio"
                           name="dyr"
                           id="cbx6"
                           class="hidden-xs-up"
                           @onchange="@(() =>
                                      {
                                          _selectDyr = "nei";
                                          if (_surveyDto.BAnimal != null)
                                          {
                                              _surveyDto.BAnimal = null;
                                          }
                                      })"
                           checked="@(_selectDyr == "nei")"/>
                    <label for="cbx6" class="cbx"></label>
                    <label for="cbx6" class="lbl">Nei</label>
                </div>
            }
        </div>

        <div id="animalInfo" class="animalInfo-container">
            @if (_selectDyr == "ja")
            { 
                <div class="animalData">
                    <div class="form-floating mb-3">
                        <InputText id="pigghuder" class="form-control"
                                   @bind-Value="_surveyDto.BAnimal.Pigghunder"
                                   placeholder="Pigghuder"/>
                        <label for="pigghuder">Pigghuder</label>
                    </div>
                    <div class="btn-group mb-3" role="group">
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Pigghunder == "30+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Pigghunder = v)'>30+</button>
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Pigghunder == "50+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Pigghunder = v)'>50+</button>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText id="krepsdyr" class="form-control"
                                   @bind-Value="_surveyDto.BAnimal.Krepsdyr"
                                   placeholder="Krepsdyr"/>
                        <label for="krepsdyr">Krepsdyr</label>
                    </div>
                    <div class="btn-group mb-3" role="group">
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Krepsdyr == "30+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Krepsdyr = v)'>30+</button>
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Krepsdyr == "50+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Krepsdyr = v)'>50+</button>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText id="skjell" class="form-control"
                                   @bind-Value="_surveyDto.BAnimal.Skjell"
                                   placeholder="Skjell"/>
                        <label for="skjell">Skjell</label>
                    </div>
                    <div class="btn-group mb-3" role="group">
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Skjell == "30+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Skjell = v)'>30+</button>
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Skjell == "50+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Skjell = v)'>50+</button>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText id="borstemark" class="form-control"
                                   @bind-Value="_surveyDto.BAnimal.Borstemark"
                                   placeholder="Børstemark"/>
                        <label for="borstemark">Børstemark</label>
                    </div>
                    <div class="btn-group mb-3" role="group">
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Borstemark == "30+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Borstemark = v)'>30+</button>
                        <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Borstemark == "50+" ? "active" : "")"
                                @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Borstemark = v)'>50+</button>
                    </div>
                </div>
            }
        </div>

        <div class="form-floating mb-3 user-input" id="arter-container">
            @if (_surveyDto?.BAnimal?.Arter != null)
            {
                @foreach (Arter art in Enum.GetValues(typeof(Arter)))
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm me-1 mb-1"
                            @onclick="() => AddArter(art)">
                        @art.ToString()
                    </button>
                }
                
                <InputText class="form-control" id="arter" placeholder="Arter" @bind-Value="_surveyDto.BAnimal.Arter"/>
                <label for="arter">Arter</label>
            }
        </div>

        <div class="form-floating mb-3 user-input" id="merknader-container">
            @if (_surveyDto.Merknader != null)
            {
                @foreach (Merknader note in Enum.GetValues(typeof(Merknader)))
                {
                    <button type="button" class="btn btn-outline-secondary btn-sm me-1 mb-1"
                            @onclick="() => AddMerknad(note)">
                        @note.GetDescription()
                    </button>
                }

                <InputText class="form-control" id="merknader" placeholder="Merknader" @bind-Value="_surveyDto.Merknader"/>
                <label for="merknader">Merknader</label>
            }
        </div>
        
        <div class="form-floating mb-3 user-input">
            @if (_surveyDto.Korrigeringer is not "")
            {
                <InputText class="form-control" id="korrigeringer" placeholder="Korrigeringer" @bind-Value="_surveyDto.Korrigeringer"/>
                <label for="korrigeringer">Korrigeringer</label>
            }
        </div>

        <div class="row justify-content-center" style="display: flex; margin: 1rem auto;">
            @if (_validationMessage != null)
            {
                <div class="col-12 text-center alert alert-danger mb-2" style="width: 60%;">
                    @_validationMessage
                </div>
            }
        </div>
    </div>
    
    @switch (_result)
    {
        case true:
            <div class="alert alert-success" style="display: flex; margin: 1rem auto; width: 60%;">@_resultMessage</div>
            break;
        case false:
            <div class="alert alert-danger" style="display: flex; margin: 1rem auto; width: 60%;">@_resultMessage</div>
            break;
    }
}

@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="row justify-content-center">
        <div class="col-12 text-center alert alert-danger mb-2" style="width: 60%;">
            @_errorMessage
        </div>
    </div>
}

<div class="button-container mb-5">
    <button id="cancelBtn" class="btn custom-outline-secondary-btn" style="display: none;" @onclick="ConfirmCancel">
        Avbryt
    </button>
    <button id="lastBtn" onclick="showLast()" class="btn custom-btn">Forrige</button>
    <button id="nextBtn" onclick="showNext()" class="btn custom-btn">Neste</button>
    <button id="submitBtn" class="btn custom-btn" style="display: none;" @onclick="ConfirmSubmit">
        Oppdater
    </button>
</div>


@code {
    [Parameter] 
    public Guid ProjectId { get; set; }
    [Parameter]
    public Guid StationId { get; set; }
    [Parameter]
    public Guid SurveyId { get; set; }

    private EditSurveyDto? _surveyDto;

    private string _coordinateNorthGrade = "";
    private string _coordinateNorthMinute = "";
    private string _coordinateEastGrade = "";
    private string _coordinateEastMinute = "";

    private string? _selectBunnType;
    private string? _selectSensorisk;
    private string? _selectDyr;

    private bool _isLoaded = false;
    
    private bool? _result;
    private string? _resultMessage;

    private string? _errorMessage;
    private string? _validationMessage;
    
    private const int MaxAllowedImageSize = 5120000; // 5 mb
    private ImageDto? _usiltImage;
    private ImageDto? _siltImage;
    private string? usiltPreviewUrl;
    private string? siltPreviewUrl;
    private Guid usiltKey = Guid.NewGuid();
    private Guid siltKey  = Guid.NewGuid();

    private Task OnUsiltImageSelect(InputFileChangeEventArgs e)
        => UploadAndPreview(e.File, false);

    private Task OnSiltImageSelect(InputFileChangeEventArgs e)
        => UploadAndPreview(e.File, true);

    private async Task UploadAndPreview(IBrowserFile file, bool isSilt)
    {
        using var ms = new MemoryStream();
        await file.OpenReadStream(MaxAllowedImageSize).CopyToAsync(ms);
        var preview = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";

        if (isSilt)
            siltPreviewUrl = preview;
        else
            usiltPreviewUrl = preview;

        var form = new MultipartFormDataContent {
            { new StreamContent(new MemoryStream(ms.ToArray())), "Image", file.Name },
            { new StringContent(SurveyId.ToString()), "UndersokelseId" },
            { new StringContent(isSilt.ToString()),     "Silt" }
        };
        var resp = await Http.PostAsync("/api/images/upload", form);
        if (!resp.IsSuccessStatusCode) return;
        var dto = await resp.Content.ReadFromJsonAsync<ImageDto>();
        if (dto == null) return;

        if (isSilt)
        {
            _siltImage     = dto;
            siltPreviewUrl = "https://localhost:7096" + dto.Path;
        }
        else
        {
            _usiltImage      = dto;
            usiltPreviewUrl  = "https://localhost:7096" + dto.Path;
        }
    }

    private async Task RemoveUsiltImage()
    {
        if (_usiltImage != null && await RemoveImage(_usiltImage.Id))
            _usiltImage = null;

        usiltPreviewUrl = null;
        usiltKey        = Guid.NewGuid();
    }

    private async Task RemoveSiltImage()
    {
        if (_siltImage != null && await RemoveImage(_siltImage.Id))
            _siltImage = null;

        siltPreviewUrl = null;
        siltKey        = Guid.NewGuid();
    }

    private async Task<bool> RemoveImage(Guid id)
    {
        var r = await Http.DeleteAsync($"/api/images/{id}/remove");
        return r.IsSuccessStatusCode;
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationLockService.Lock();

        try
        {
            var existingSurvey = await Http.GetFromJsonAsync<EditSurveyDto>(
                $"api/Project/{ProjectId}/station/{StationId}/survey/{SurveyId}");

            if (existingSurvey == null || existingSurvey?.BStation == null)
            {
                _errorMessage = "Survey or station could not be found.";
                return;
            }

            _surveyDto = existingSurvey;

            ParseCoordinateNorth();
            ParseCoordinateEast();

            _isLoaded = true;
            
            var images = await Http.GetFromJsonAsync<IEnumerable<ImageDto>>(
                $"/api/images/all/{SurveyId}");
            _usiltImage = images?.FirstOrDefault(x => x.Silt == false);
            _siltImage  = images?.FirstOrDefault(x => x.Silt == true);

            if (_usiltImage != null) usiltPreviewUrl = "https://localhost:7096" + _usiltImage.Path;
            if (_siltImage  != null) siltPreviewUrl  = "https://localhost:7096" + _siltImage.Path;
        
            if (_surveyDto.BlotbunnId != null)
                _selectBunnType = "blot";
            else if (_surveyDto.HardbunnId != null)
                _selectBunnType = "hard";

            _selectSensorisk = _surveyDto.SensoriskId != null ? "ja" : "nei";
            _selectDyr = _surveyDto.DyrId != null ? "ja" : "nei";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading data: {ex.Message}";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(300);
            await Js.InvokeVoidAsync("updateDisplay_2");
        }
    }

    private void ParseCoordinateNorth()
    {
        if (!string.IsNullOrEmpty(_surveyDto.BStation.KoordinatNord))
        {
            var parts = _surveyDto.BStation.KoordinatNord.Split('°');
            if (parts.Length == 2)
            {
                _coordinateNorthGrade = parts[0];
                _coordinateNorthMinute = parts[1];
            }
        }
    }
    
    private void ParseCoordinateEast()
    {
        if (!string.IsNullOrEmpty(_surveyDto.BStation.KoordinatOst))
        {
            var parts = _surveyDto.BStation.KoordinatOst.Split('°');
            if (parts.Length == 2)
            {
                _coordinateEastGrade = parts[0];
                _coordinateEastMinute = parts[1];
            }
        }
    }
    
    private void UpdateCoordinateNorth()
    {
        if (!string.IsNullOrWhiteSpace(_coordinateNorthGrade) && !string.IsNullOrWhiteSpace(_coordinateNorthMinute))
        {
            if (double.TryParse(_coordinateNorthMinute, out var minute))
            {
                _surveyDto.BStation.KoordinatNord = $"{_coordinateNorthGrade}°{minute:F3}";
            }
            else
            {
                _surveyDto.BStation.KoordinatNord = $"{_coordinateNorthGrade}°{_coordinateNorthMinute}";
            }
        }
    }
    
    private void UpdateCoordinateEast()
    {
        if (!string.IsNullOrWhiteSpace(_coordinateEastGrade) && !string.IsNullOrWhiteSpace(_coordinateEastMinute))
        {
            if (double.TryParse(_coordinateEastMinute, out var minute))
            {
                _surveyDto.BStation.KoordinatOst = $"{_coordinateEastGrade}°{minute:F3}";
            }
            else
            {
                _surveyDto.BStation.KoordinatOst = $"{_coordinateEastGrade}°{_coordinateEastMinute}";
            }
        }
    }
    
    private void ClearPositionAndDepth(int value)
    {
        if (_surveyDto.BStation != null)
        {
            _coordinateNorthGrade = "0";
            _coordinateNorthMinute = "0";
            _coordinateEastGrade = "0";
            _coordinateEastMinute = "0";
            
            UpdateCoordinateNorth();
            UpdateCoordinateEast();

            _surveyDto.BStation.Dybde = 0;
        }
    }

    private void CycleValue(object target, string propertyName)
    {
        if (target == null) return;
        
        var property = target.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var currentValue = (float)(property.GetValue(target) ?? 0f);
            
            if (currentValue == 0)
                property.SetValue(target, 1f);
            else if (currentValue == 1f)
                property.SetValue(target, 0.5f);
            else
                property.SetValue(target, 0f);
        }
    }

    private void ToggleZeroOneValue(object target, string propertyName)
    {
        if (target == null) return;
    
        var property = target.GetType().GetProperty(propertyName);
        if (property != null && property.PropertyType == typeof(float))
        {
            var currentValue = (float)(property.GetValue(target) ?? 0f);

            property.SetValue(target, currentValue == 0f ? 1f : 0f);
        }
    }
    
    private void SetAntallDyrVerdi(string verdi, Action<string> setValue)
    {
        try
        {
            var antall = new AntallDyr(verdi);
            setValue(antall.ToString());
        }
        catch (ArgumentException ex)
        {
            _resultMessage = ex.Message;
        }
    }
    
    private void AddArter(Arter arter)
    {
        var newValue = arter.ToString();

        if (string.IsNullOrWhiteSpace(_surveyDto.BAnimal.Arter))
        {
            _surveyDto.BAnimal.Arter = newValue;
        }
        else if (!_surveyDto.BAnimal.Arter.Contains(newValue))
        {
            _surveyDto.BAnimal.Arter += $", {newValue}";
        }
    }
    
    private void AddMerknad(Merknader merknad)
    {
        var newValue = merknad.ToString();

        if (string.IsNullOrWhiteSpace(_surveyDto.Merknader))
        {
            _surveyDto.Merknader = newValue;
        }
        else if (!_surveyDto.Merknader.Contains(newValue))
        {
            _surveyDto.Merknader += $", {newValue}";
        }
    }
    
    bool IsAllZeroOrNull<T>(T obj)
    {
        if (obj == null) return true;

        foreach (var prop in typeof(T).GetProperties())
        {
            if (!prop.CanRead) continue;

            var value = prop.GetValue(obj);
            if (value == null) continue;
            if (value is string str && string.IsNullOrWhiteSpace(str)) continue;

            var type = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;

            if (type == typeof(int))
            {
                if ((int)value != 0) return false;
            }
            else if (type == typeof(float))
            {
                if (Math.Abs((float)value) > 0.0001f) return false;
            }
            else if (type == typeof(Guid))
            {
                if ((Guid)value != Guid.Empty) return false;
            }
            else if (type == typeof(string))
            {
                if (!string.IsNullOrWhiteSpace((string)value)) return false;
            }
            else
            {
                var defaultValue = Activator.CreateInstance(type);
                if (!value.Equals(defaultValue)) return false;
            }
        }

        return true;
    }
    
    private async Task ConfirmCancel()
    {
        bool confirmed = await Js.InvokeAsync<bool>("confirm", "Er du sikker på at du vil avbryte?");
        if (confirmed)
        {
            BackToProjectPage();
        }
    }

    private async Task ConfirmSubmit()
    {
        bool confirmed = await Js.InvokeAsync<bool>("confirm", "Er du sikker på at du vil registrere undersøkelsen?");
        if (confirmed)
        {
            await SubmitSurvey();
        }
    }
    
    private void BackToProjectPage()
    {
        NavigationLockService.Unlock();
        Navigation.NavigateTo($"/project/{ProjectId:D}?tab=b_stations", forceLoad: true);
    }

    private async Task SubmitSurvey()
    {
        if (_selectBunnType == "blot")
        {
            _surveyDto.HardbunnId = null;
            _surveyDto.BHardBase = null;

            bool allDefault = IsAllZeroOrNull(_surveyDto.BSoftBase);
            if (allDefault)
            {
                _validationMessage = "Feltene for sedimenttype må velges";
                return;
            }
        
            _surveyDto.SedimentId = Guid.NewGuid();
            _surveyDto.BSediment.Id = _surveyDto.SedimentId.Value;
        }
        else if (_selectBunnType == "hard")
        {
            _surveyDto.BlotbunnId = null;
            _surveyDto.BSoftBase = null;
            _surveyDto.SedimentId = null;
            _surveyDto.BSediment = null;

            if (_selectSensorisk != "ja" && _selectSensorisk != "nei")
            {
                _validationMessage = "Valg av sensorisk er påkrevd";
                return;
            }

            if (_selectSensorisk == "nei")
            {
                _surveyDto.BlotbunnId = null;
                _surveyDto.BSoftBase = null;
                _surveyDto.SedimentId = null;
                _surveyDto.BSediment = null;
                _surveyDto.SensoriskId = null;
                _surveyDto.BSensorisk = null;
            }
        }
        
        if (_selectDyr == "ja")
        {
            bool defaultAttributes = IsAllZeroOrNull(_surveyDto.BAnimal);
            if (defaultAttributes)
            {
                _validationMessage = "Feltene for dyr må fylles ut";
                return;
            }
        }
        else if (_selectDyr == "nei")
        {
            _surveyDto.DyrId = null;
            _surveyDto.BAnimal = null;
        }
        
         var response = await Http.PutAsJsonAsync(
            $"api/Project/{ProjectId}/station/{StationId}/survey/{SurveyId}",
            _surveyDto);
        
        if (response.IsSuccessStatusCode)
        {
            _result = true;
            _resultMessage = await response.Content.ReadAsStringAsync();
            await Task.Delay(1000);
            NavigationLockService.Unlock();
            Navigation.NavigateTo($"/project/{ProjectId:D}?tab=b_stations", forceLoad: true);
        }
        else
        {
            _result = false;
            _resultMessage = await response.Content.ReadAsStringAsync();
        }
    }
}


<script>
    let currentIndex = 1;
    const totalDivs = 3;

    function showDiv(index) {
        for (let i = 1; i <= totalDivs; i++) {
            document.getElementById('div' + i).classList.remove('active');
        }
        document.getElementById('div' + index).classList.add('active');
        updateButtons();
    }

    function showLast() {
        if (currentIndex > 1) {
            currentIndex--;
            showDiv(currentIndex);
        }
    }

    function showNext() {
        if (currentIndex < totalDivs) {
            currentIndex++;
            showDiv(currentIndex);
        }
    }

    function updateButtons() {
        const lastBtn = document.getElementById('lastBtn');
        const nextBtn = document.getElementById('nextBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const submitBtn = document.getElementById('submitBtn');


        lastBtn.style.display = currentIndex === 1 ? 'none' : 'inline-block';
        nextBtn.style.display = currentIndex === totalDivs ? 'none' : 'inline-block';
        cancelBtn.style.display = currentIndex === 1 ? 'inline-block' : 'none';
        submitBtn.style.display = currentIndex === totalDivs ? 'inline-block' : 'none';
    }

    updateButtons();
</script>

<script>
    const radioSoft = document.getElementById("cbx1");
    const radioHard = document.getElementById("cbx2");
    const sensoryQuestion = document.getElementById("sensoryRadio");

    const radioYes = document.getElementById("cbx3");
    const radioNo = document.getElementById("cbx4");
    const sensoryInfo = document.getElementById("sensoryInfo");

    const sedimentType = document.getElementById("sedimentType");
    const hardSediment = document.getElementById("hardSediment");
    const softSediment = document.getElementById("softSediment");

    const tomGrabb_1 = document.getElementById("tomGrabb_1");
    const tomGrabb_2 = document.getElementById("tomGrabb_2");

    const animalYes = document.getElementById("cbx5");
    const animalNo = document.getElementById("cbx6");
    const animalInfo = document.getElementById("animalInfo");
    const arterContainer = document.getElementById("arter-container");

    const provePh = document.getElementById("ProvePh");
    const proveEh = document.getElementById("ProveEh");
    const proveTemp = document.getElementById("ProveTemp");

    const sensoryDataSoft_1 = document.getElementById("sensoryDataSoft_1");
    const sensoryDataSoft_2 = document.getElementById("sensoryDataSoft_2");
    const sensoryDataSoft_3 = document.getElementById("sensoryDataSoft_3");

    if (radioSoft && radioHard && radioYes && radioNo) {
        radioSoft.addEventListener("change", updateDisplay);
        radioHard.addEventListener("change", updateDisplay);
        radioYes.addEventListener("change", updateDisplay);
        radioNo.addEventListener("change", updateDisplay);
    }

    if (animalYes && animalNo) {
        animalYes.addEventListener("change", updateDisplay_2);
        animalNo.addEventListener("change", updateDisplay_2);
    }

    function updateDisplay() {
        if (radioHard && radioHard.checked) {
            if (sensoryQuestion) sensoryQuestion.style.display = "flex";
            if (sedimentType) sedimentType.style.display = "flex";
            if (hardSediment) hardSediment.style.display = "flex";
            if (softSediment) softSediment.style.display = "none";
            if (tomGrabb_1) tomGrabb_1.style.display = "flex";
            if (tomGrabb_2) tomGrabb_2.style.display = "flex";

            if (radioYes && radioYes.checked) {
                if (sensoryInfo) sensoryInfo.style.display = "flex";
                if (provePh) provePh.disabled = true;
                if (proveEh) proveEh.disabled = true;
                if (proveTemp) proveTemp.disabled = true;
                if (sensoryDataSoft_1) sensoryDataSoft_1.style.opacity = "0.5";
                if (sensoryDataSoft_2) sensoryDataSoft_2.style.opacity = "0.5";
                if (sensoryDataSoft_3) sensoryDataSoft_3.style.opacity = "0.5";
            } else {
                if (sensoryInfo) sensoryInfo.style.display = "none";
            }

        } else if (radioSoft && radioSoft.checked) {
            if (sensoryQuestion) sensoryQuestion.style.display = "none";
            if (sensoryInfo) sensoryInfo.style.display = "flex";

            if (sedimentType) sedimentType.style.display = "flex";
            if (softSediment) softSediment.style.display = "flex";
            if (hardSediment) hardSediment.style.display = "none";

            if (provePh) provePh.disabled = false;
            if (proveEh) proveEh.disabled = false;
            if (proveTemp) proveTemp.disabled = false;
            if (sensoryDataSoft_1) sensoryDataSoft_1.style.opacity = "1";
            if (sensoryDataSoft_2) sensoryDataSoft_2.style.opacity = "1";
            if (sensoryDataSoft_3) sensoryDataSoft_3.style.opacity = "1";

            if (tomGrabb_1) tomGrabb_1.style.display = "none";
            if (tomGrabb_2) tomGrabb_2.style.display = "none";
        } else {
            if (sensoryQuestion) sensoryQuestion.style.display = "none";
            if (sensoryInfo) sensoryInfo.style.display = "none";
        }
    }

    function updateDisplay_2() {
        if (animalYes && animalYes.checked) {
            if (animalInfo) animalInfo.style.display = "flex";
            if (arterContainer) arterContainer.style.display = "flex";
        } else {
            if (animalInfo) animalInfo.style.display = "none";
            if (arterContainer) arterContainer.style.display = "none";
        }
    }

    updateDisplay();
    updateDisplay_2();
</script>
