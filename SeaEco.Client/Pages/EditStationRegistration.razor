@page "/project/{ProjectId:guid}/station/{StationId:guid}/create-survey"
@page "/project/{ProjectId:guid}/station/{StationId:guid}/edit-survey/{SurveyId:guid}"

@using Microsoft.AspNetCore.Authorization
@using SeaEco.Abstractions.Enums
@using SeaEco.Abstractions.Enums.Bsensorisk
@using SeaEco.Abstractions.Extensions
@using SeaEco.Abstractions.Models.BSurvey
@using SeaEco.Abstractions.Models.Bundersokelse
@using SeaEco.Abstractions.ValueObjects
@inject HttpClient Http
@attribute [Authorize(Roles = "admin")]


<h4>Stasjonsredigering</h4>

<div id="div1" class="content-div active">
    @if (_surveyDto.BStation != null)
    {
        <div class="position-depth-container">
            <div class="form-floating mb-3">
                <InputText id="position_n" class="form-control" @bind-Value="_surveyDto.BStation.KoordinatNord" placeholder="N"/>
                <label for="position_n">Posisjon nord</label>
            </div>
    
            <div class="form-floating mb-3">
                <InputText id="position_o" class="form-control" @bind-Value="_surveyDto.BStation.KoordinatOst" placeholder="O"/>
                <label for="position_o">Posisjon øst</label>
            </div>
    
            <div class="form-floating mb-3">
                <InputNumber id="depth" class="form-control" @bind-Value="_surveyDto.BStation.Dybde" placeholder="M"/>
                <label for="depth">Dybde</label>
            </div>
    
            <div class="position-depth-button-container">
                <button class="btn btn-outline-primary clear-data @(_surveyDto.BStation.Dybde == 0 ? "active" : "")"
                        @onclick="() => ClearPositionAndDepth(0)">
                    Annen posisjon og dybde
                </button>
            </div>
        </div>
    }

    <div class="equipment-container">
        <div class="form-floating mb-3">
            <InputNumber id="equip-1" class="form-control" @bind-Value="_surveyDto.AntallGrabbhugg" placeholder="Grabbhugg"/>
            <label for="equip-1">Antall grabbhugg</label>
        </div>

        <div class="checkbox-3-container">
            <label class="custom-checkbox" for="equip-2">
                <span class="custom-label">Gokjent grabbhastighet</span>
                <input id="equip-2" type="checkbox" checked="@_surveyDto.GrabbhastighetGodkjent">
                <span class="custom-checkmark"></span>
            </label>
        </div>
    </div>
</div>

<div id="div2" class="content-div">
    <div class="typeRadio-container">
        <h5>Bunntype: </h5>

        <div class="cntr">
            <input type="radio"
                   name="bunntype"
                   id="cbx1"
                   class="hidden-xs-up"
                   @onchange="@(() => _selectBunnType = "blot")"
                   checked="@(_selectBunnType == "blot")" />
            <label for="cbx1" class="cbx"></label>
            <label for="cbx1" class="lbl">Bløt</label>
        </div>

        <div class="cntr">
            <input type="radio"
                   name="bunntype"
                   id="cbx2"
                   class="hidden-xs-up"
                   @onchange="@(() => _selectBunnType = "hard")"
                   checked="@(_selectBunnType == "hard")" />
            <label for="cbx2" class="cbx"></label>
            <label for="cbx2" class="lbl">Hard</label>
        </div>
    </div>


    <div id="sensoryRadio" class="sensoryRadio-container">
        <h5>Er sensorisk utført?</h5>

        <div class="cntr">
            <input type="radio" 
                   name="sensorisk" 
                   id="cbx3" 
                   class="hidden-xs-up"
                   @onchange="@(() => _selectSensorisk = "ja")"
                   checked="@(_selectSensorisk == "ja")"
            />
            <label for="cbx3" class="cbx"></label>
            <label for="cbx3" class="lbl">Ja</label>
        </div>

        <div class="cntr">
            <input type="radio"
                   name="sensorisk"
                   id="cbx4"
                   class="hidden-xs-up"
                   @onchange="@(() => _selectSensorisk = "nei")"
                   checked="@(_selectSensorisk == "nei")"
            />
            <label for="cbx4" class="cbx"></label>
            <label for="cbx4" class="lbl">Nei</label>
        </div>
    </div>

    <div id="sensoryInfo" class="sensoryInfo-container">
        <div class="sensoryData">
            <div class="form-floating mb-3" id="sensoryDataSoft_1">
                <InputNumber id="ProvePh" class="form-control" @bind-Value="_surveyDto.BSediment.Ph" placeholder="pH" />
                <label for="ProvePh">pH</label>
            </div>

            <div class="form-floating mb-3" id="sensoryDataSoft_2">
                <InputNumber id="ProveEh" class="form-control" @bind-Value="_surveyDto.BSediment.Eh" placeholder="Eh" />
                <label for="ProveEh">EH</label>
            </div>

            <div class="form-floating mb-3" id="sensoryDataSoft_3">
                <InputNumber id="ProveTemp" class="form-control" @bind-Value="_surveyDto.BSediment.Temperatur" placeholder="Temp" />
                <label for="ProveTemp">Temp</label>
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="Farge" class="form-select" @bind-Value="_surveyDto.BSensorisk.Farge">
                    <option value="" disabled>Velg farge</option>
                    @foreach (Farge f in Enum.GetValues(typeof(Farge)))
                    {
                        <option value="@( (int)f )">@f.GetDescription()</option>
                    }
                </InputSelect>
                <label for="Farge">Farge</label>
            </div>


            <div class="form-floating mb-3">
                <InputSelect id="Lukt" class="form-select" @bind-Value="_surveyDto.BSensorisk.Lukt">
                    <option value="" disabled>Velg lukt</option>
                    @foreach (Lukt l in Enum.GetValues(typeof(Lukt)))
                    {
                        <option value="@( (int)l )">@l.GetDescription()</option>
                    }
                </InputSelect>
                <label for="Lukt">Lukt</label>
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="Konsistens" class="form-select" @bind-Value="_surveyDto.BSensorisk.Konsistens">
                    <option value="" disabled>Velg konsistens</option>
                    @foreach (Konsistens k in Enum.GetValues(typeof(Konsistens)))
                    {
                        <option value="@( (int)k )">@k.GetDescription()</option>
                    }
                </InputSelect>
                <label for="Konsistens">Konsistens</label>
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="GrabbVolum" class="form-select" @bind-Value="_surveyDto.BSensorisk.Grabbvolum">
                    <option value="" disabled>Velg grabbvolum</option>
                    @foreach (Grabbvolum g in Enum.GetValues(typeof(Grabbvolum)))
                    {
                        <option value="@( (int)g )">@g.GetDescription()</option>
                    }
                </InputSelect>
                <label for="GrabbVolum">GrabbVolum</label>
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="Tykkelse" class="form-select" @bind-Value="_surveyDto.BSensorisk.Tykkelseslamlag">
                    <option value="" disabled>Velg tykkelseslamlag</option>
                    @foreach (Tykkelseslamlag t in Enum.GetValues(typeof(Tykkelseslamlag)))
                    {
                        <option value="@( (int)t )">@t.GetDescription()</option>
                    }
                </InputSelect>
                <label for="Tykkelse">Tykkelseslamlag</label>
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="Gassbobler" class="form-select" @bind-Value="_surveyDto.BSensorisk.Gassbobler">
                    <option value="" disabled>Velg gassbobler</option>
                    @foreach (Gassbobler gass in Enum.GetValues(typeof(Gassbobler)))
                    {
                        <option value="@( (int)gass )">@gass.GetDescription()</option>
                    }
                </InputSelect>
                <label for="Gassbobler">Gassbobler</label>
            </div>
        </div>
    </div>

    <div class="sedimentType-container" id="sedimentType">
        <div class="hardSediment-container" id="hardSediment">
            <h5>Bunntype:</h5>
            
            <div class="checkbox-container">
                <button class="toggle-btn" data-level="@(_surveyDto.BHardBase?.Steinbunn.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BHardBase, nameof(_surveyDto.BHardBase.Steinbunn))"
                        disabled="@(_surveyDto.BHardBase == null)">
                    Steinbunn (@_surveyDto.BHardBase?.Steinbunn ?? 0)
                </button>
                
                <button class="toggle-btn" data-level="@(_surveyDto.BHardBase?.Fjellbunn.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BHardBase, nameof(_surveyDto.BHardBase.Fjellbunn))"
                        disabled="@(_surveyDto.BHardBase == null)">
                    Fjellbunn (@_surveyDto.BHardBase?.Fjellbunn ?? 0)
                </button>
            </div>
        </div>

        <div class="softSediment-container" id="softSediment">
            <h5>Sedimenttype:</h5>
            
            <div class="checkbox-container">
                <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Sand.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Sand))"
                        disabled="@(_surveyDto.BSoftBase == null)">
                    Sand (@_surveyDto.BSoftBase?.Sand ?? 0)
                </button>
                <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Leire.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Leire))"
                        disabled="@(_surveyDto.BSoftBase == null)">
                    Leire (@_surveyDto.BSoftBase?.Leire ?? 0)
                </button>
                <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Silt.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Silt))"
                        disabled="@(_surveyDto.BSoftBase == null)">
                    Silt (@_surveyDto.BSoftBase?.Silt ?? 0)
                </button>
                <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Grus.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Grus))"
                        disabled="@(_surveyDto.BSoftBase == null)">
                    Grus (@_surveyDto.BSoftBase?.Grus ?? 0)
                </button>
                <button class="toggle-btn" data-level="@(_surveyDto.BSoftBase?.Skjellsand.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "0")"
                        @onclick="() => CycleValue(_surveyDto.BSoftBase, nameof(_surveyDto.BSoftBase.Skjellsand))"
                        disabled="@(_surveyDto?.BSoftBase == null)">
                    Skjellsand (@_surveyDto.BSoftBase?.Skjellsand ?? 0)
                </button>
            </div>
        </div>
    </div>

    @* TODO: Picture usilt and tom grabb container *@
    <div class="picture-container">
        <button class="picture-button" style="vertical-align:middle"><span>Usilt bilde</span></button>

        <div class="tom-grabb-container" id="tomGrabb_1">
            <label class="custom-checkbox" for="tom-grabb-1">
                <span class="custom-label">Tom grabb</span>
                <input id="tom-grabb-1" type="checkbox">
                <span class="custom-checkmark"></span>
            </label>
        </div>
    </div>
    @* TODO: Picture usilt and tom grabb container *@
</div>

<div id="div3" class="content-div">
    @* TODO: Picture silt and tom grabb container *@
    <div class="picture-container">
        <button class="picture-button" style="vertical-align:middle"><span>Silt bilde</span></button>

        <div class="tom-grabb-container" id="tomGrabb_2">
            <label class="custom-checkbox" for="tom-grabb-2">
                <span class="custom-label">Tom grabb</span>
                <input id="tom-grabb-2" type="checkbox">
                <span class="custom-checkmark"></span>
            </label>
        </div>
    </div>
    @* TODO: Picture usilt and tom grabb container *@

    <div class="checkbox-1-container">
        <label class="custom-checkbox" for="beggiatoa">
            <span class="custom-label">Beggiatoa</span>
            <input type="checkbox" id="beggiatoa" @bind="_surveyDto.Beggiatoa"/>
            <span class="custom-checkmark"></span>
        </label>

        <label class="custom-checkbox" for="forrester">
            <span class="custom-label">Forrester</span>
            <input type="checkbox" id="forrester" @bind="_surveyDto.Forrester"/>
            <span class="custom-checkmark"></span>
        </label>

        <label class="custom-checkbox" for="fekalier">
            <span class="custom-label">Fekalier</span>
            <input type="checkbox" id="fekalier" @bind="_surveyDto.Fekalier"/>
            <span class="custom-checkmark"></span>
        </label>
    </div>

    <div class="animalRadio-container">
        <h5>Dyr: </h5>

        <div class="cntr">
            <input type="radio"
                   name="dyr" 
                   id="cbx5" 
                   class="hidden-xs-up"
                   @onchange="@(() => _selectDyr = "ja")"
                   checked="@(_selectDyr == "ja")"
            />
            <label for="cbx5" class="cbx"></label>
            <label for="cbx5" class="lbl">Ja</label>
        </div>

        <div class="cntr">
            <input type="radio"
                   name="dyr" 
                   id="cbx6" 
                   class="hidden-xs-up"
                   @onchange="@(() => _selectDyr = "nei")"
                   checked="@(_selectDyr == "nei")"
            />
            <label for="cbx6" class="cbx"></label>
            <label for="cbx6" class="lbl">Nei</label>
        </div>
    </div>

    <div id="animalInfo" class="animalInfo-container">
        <div class="animalData">
            <div class="form-floating mb-3">
                <InputText id="pigghuder" class="form-control"
                           @bind-Value="_surveyDto.BAnimal.Pigghunder"
                           placeholder="Pigghuder" />
                <label for="pigghuder">Pigghuder</label>
            </div>
            <div class="btn-group mb-3" role="group">
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Pigghunder == "30+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Pigghunder = v)'>30+</button>
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Pigghunder == "50+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Pigghunder = v)'>50+</button>
            </div>

            <div class="form-floating mb-3">
                <InputText id="krepsdyr" class="form-control"
                           @bind-Value="_surveyDto.BAnimal.Krepsdyr"
                           placeholder="Krepsdyr" />
                <label for="krepsdyr">Krepsdyr</label>
            </div>
            <div class="btn-group mb-3" role="group">
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Krepsdyr == "30+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Krepsdyr = v)'>30+</button>
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Krepsdyr == "50+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Krepsdyr = v)'>50+</button>
            </div>

            <div class="form-floating mb-3">                
                <InputText id="skjell" class="form-control"
                           @bind-Value="_surveyDto.BAnimal.Skjell"
                           placeholder="Skjell"/>
                <label for="skjell">Skjell</label>
            </div>
            <div class="btn-group mb-3" role="group">
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Skjell == "30+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Skjell = v)'>30+</button>
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Skjell == "50+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Skjell = v)'>50+</button>
            </div>

            <div class="form-floating mb-3">
                <InputText id="borstemark" class="form-control"
                           @bind-Value="_surveyDto.BAnimal.Borstemark"
                           placeholder="Børstemark"/>
                <label for="borstemark">Børstemark</label>
            </div>
            <div class="btn-group mb-3" role="group">
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Borstemark == "30+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("30+", v => _surveyDto.BAnimal.Borstemark = v)'>30+</button>
                <button class="btn btn-outline-primary @(_surveyDto.BAnimal.Borstemark == "50+" ? "active" : "")"
                        @onclick='() => SetAntallDyrVerdi("50+", v => _surveyDto.BAnimal.Borstemark = v)'>50+</button>
            </div>
        </div>
    </div>

    <div class="form-floating mb-3 user-input" id="arter-container">
        @foreach (Arter art in Enum.GetValues(typeof(Arter)))
        {
            <button type="button" class="btn btn-outline-primary btn-sm me-1 mb-1"
                    @onclick="() => AddArter(art)">
                @art.GetDescription()
            </button>
        }
        
        <InputText class="form-control" id="arter" placeholder="Arter" @bind-Value="_surveyDto.BAnimal.Arter" />
        <label for="arter">Arter</label>
    </div>

    <div class="form-floating mb-3 user-input">
        @foreach (Merknader note in Enum.GetValues(typeof(Merknader)))
        {
            <button type="button" class="btn btn-outline-secondary btn-sm me-1 mb-1"
                    @onclick="() => AddMerknad(note)">
                @note.GetDescription()
            </button>
        }
        
        <InputText class="form-control" id="merknader" placeholder="Merknader" @bind-Value="_surveyDto.Merknader"/>
        <label for="merknader">Merknader</label>
    </div>

    @switch (_result)
    {
        case true:
            <div class="alert alert-success">@_resultMessage</div>
            break;
        case false:
            <div class="alert alert-danger">@_resultMessage</div>
            break;
    }
</div>

<div class="button-container">
    <button id="lastBtn" onclick="showLast()" class="custom-btn">Forrige</button>
    <button id="nextBtn" onclick="showNext()" class="custom-btn">Neste</button>
    <button id="submitBtn" class="custom-btn" style="display: none;" @onclick="SubmitSurvey">
        @(SurveyId.HasValue && SurveyId.Value != Guid.Empty ? "Oppdater" : "Registrer")
    </button>
</div>


@* Last and next button script *@
<script>
    let currentIndex = 1;
    const totalDivs = 3;

    function showDiv(index) {
        for (let i = 1; i <= totalDivs; i++) {
            document.getElementById('div' + i).classList.remove('active');
        }
        document.getElementById('div' + index).classList.add('active');
        updateButtons();
    }

    function showLast() {
        if (currentIndex > 1) {
            currentIndex--;
            showDiv(currentIndex);
        }
    }

    function showNext() {
        if (currentIndex < totalDivs) {
            currentIndex++;
            showDiv(currentIndex);
        }
    }

    function updateButtons() {
        const lastBtn = document.getElementById('lastBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');

        lastBtn.style.display = currentIndex === 1 ? 'none' : 'inline-block';
        nextBtn.style.display = currentIndex === totalDivs ? 'none' : 'inline-block';
        submitBtn.style.display = currentIndex === totalDivs ? 'inline-block' : 'none';
    }

    updateButtons();

</script>

<script>
    const radioSoft = document.getElementById("cbx1");
    const radioHard = document.getElementById("cbx2");
    const sensoryQuestion = document.getElementById("sensoryRadio");
    
    const radioYes = document.getElementById("cbx3");
    const radioNo = document.getElementById("cbx4");
    const sensoryInfo = document.getElementById("sensoryInfo");
    
    const sedimentType = document.getElementById("sedimentType");
    const hardSediment = document.getElementById("hardSediment");
    const softSediment = document.getElementById("softSediment");
    
    const tomGrabb_1 = document.getElementById("tomGrabb_1");
    const tomGrabb_2 = document.getElementById("tomGrabb_2");
    
    const animalYes = document.getElementById("cbx5");
    const animalNo = document.getElementById("cbx6");
    const animalInfo = document.getElementById("animalInfo");
    const arterContainer = document.getElementById("arter-container")
    
    function updateDisplay() {
        if (radioHard.checked) {
            sensoryQuestion.style.display = "flex";

            sedimentType.style.display = "flex";
            hardSediment.style.display = "flex";
            softSediment.style.display = "none";
            
            tomGrabb_1.style.display = "flex";
            tomGrabb_2.style.display = "flex";
            
            if (radioYes.checked) {
                sensoryInfo.style.display = "flex";

                document.getElementById("ProvePh").disabled = true;
                document.getElementById("ProveEh").disabled = true;
                document.getElementById("ProveTemp").disabled = true;
                sensoryDataSoft_1.style.opacity = "0.5";
                sensoryDataSoft_2.style.opacity = "0.5";
                sensoryDataSoft_3.style.opacity = "0.5";
            }
            else {
                sensoryInfo.style.display = "none";
            }
        }
        else if (radioSoft.checked) {
            sensoryQuestion.style.display = "none";
            sensoryInfo.style.display = "flex";

            sedimentType.style.display = "flex";
            softSediment.style.display = "flex";
            hardSediment.style.display = "none";

            document.getElementById("ProvePh").disabled = false;
            document.getElementById("ProveEh").disabled = false;
            document.getElementById("ProveTemp").disabled = false;
            sensoryDataSoft_1.style.opacity = "1";
            sensoryDataSoft_2.style.opacity = "1";
            sensoryDataSoft_3.style.opacity = "1";

            tomGrabb_1.style.display = "none";
            tomGrabb_2.style.display = "none";
        }
        else {
            sensoryQuestion.style.display = "none";
            sensoryInfo.style.display = "none";
        }
    }
    
    function updateDisplay_2() {
        if (animalYes.checked) {
            animalInfo.style.display = "flex";
            arterContainer.style.display = "flex";
        }
        else {
            animalInfo.style.display = "none";
            arterContainer.style.display = "none";
        }
    }
    
    radioSoft.addEventListener("change", updateDisplay);
    radioHard.addEventListener("change", updateDisplay);
    radioYes.addEventListener("change", updateDisplay);
    radioNo.addEventListener("change", updateDisplay);

    animalYes.addEventListener("change", updateDisplay_2);
    animalNo.addEventListener("change", updateDisplay_2);
    
    updateDisplay();
    updateDisplay_2();
</script>

@code {
    [Parameter] 
    public Guid ProjectId { get; set; }
    [Parameter]
    public Guid StationId { get; set; }
    [Parameter]
    public Guid? SurveyId { get; set; }

    private EditSurveyDto _surveyDto = new();
    private BStationDto? _station = new();

    private string? _selectBunnType;
    private string? _selectSensorisk;
    private string? _selectDyr;
    
    private bool? _result;
    private string? _resultMessage;

    protected override async Task OnInitializedAsync()
    {
        if (SurveyId.HasValue && SurveyId.Value != Guid.Empty)
        {
            // Edit mode
            var existingSurvey = await Http.GetFromJsonAsync<EditSurveyDto>
                ($"api/Project/{ProjectId}/station/{StationId}/survey/{SurveyId}");
            if (existingSurvey != null)
            {
                _surveyDto = existingSurvey;
                return;
            }
        }
        
        // Create mode
        _station = await Http.GetFromJsonAsync<BStationDto>($"api/Project/{ProjectId}/station/{StationId}");
        _surveyDto.BStation = _station;
    }
    
    private void ClearPositionAndDepth(int value)
    {
        if (value != 0) return;
        
        if (_surveyDto.BStation != null)
        {
            _surveyDto.BStation.KoordinatNord = "Annen posisjon";
            _surveyDto.BStation.KoordinatOst = "Annen posisjon";
            _surveyDto.BStation.Dybde = value;
        }
    }

    private void CycleValue(object target, string propertyName)
    {
        if (target == null) return;
        
        var property = target.GetType().GetProperty(propertyName);
        if (property != null)
        {
            var currentValue = (float)(property.GetValue(target) ?? 0f);
            
            if (currentValue == 0)
                property.SetValue(target, 0.5f);
            else if (currentValue == 0.5f)
                property.SetValue(target, 1f);
            else
                property.SetValue(target, 0f);
        }
    }
    
    private void SetAntallDyrVerdi(string verdi, Action<string> setValue)
    {
        try
        {
            var antall = new AntallDyr(verdi);
            setValue(antall.ToString());
        }
        catch (ArgumentException ex)
        {
            _resultMessage = ex.Message;
        }
    }
    
    private void AddArter(Arter arter)
    {
        var newValue = arter.GetDescription();

        if (string.IsNullOrWhiteSpace(_surveyDto.BAnimal.Arter))
        {
            _surveyDto.BAnimal.Arter = newValue;
        }
        else if (!_surveyDto.BAnimal.Arter.Contains(newValue))
        {
            _surveyDto.BAnimal.Arter += $", {newValue}";
        }
    }
    
    private void AddMerknad(Merknader merknad)
    {
        var newValue = merknad.GetDescription();

        if (string.IsNullOrWhiteSpace(_surveyDto.Merknader))
        {
            _surveyDto.Merknader = newValue;
        }
        else if (!_surveyDto.Merknader.Contains(newValue))
        {
            _surveyDto.Merknader += $", {newValue}";
        }
    }

    private async Task SubmitSurvey()
    {
        if (_selectBunnType == "blot")
        {
            _surveyDto.BlotbunnId = Guid.NewGuid();
            _surveyDto.BSoftBase = new BSoftBaseDto
            {
                Id = _surveyDto.BlotbunnId.Value
            };
            
            _surveyDto.HardbunnId = null;
            _surveyDto.BHardBase = null;

            _surveyDto.SedimentId = Guid.NewGuid();
            _surveyDto.BSediment = new BSedimentDto
            {
                Id = _surveyDto.SedimentId.Value
            };
        }
        else if (_selectBunnType == "hard")
        {
            _surveyDto.HardbunnId = Guid.NewGuid();
            _surveyDto.BHardBase = new BHardBaseDto
            {
                Id = _surveyDto.HardbunnId.Value
            };
            
            _surveyDto.BlotbunnId = null;
            _surveyDto.BSoftBase = null;
        }

        if (_selectSensorisk == "ja")
        {
            _surveyDto.SensoriskId = Guid.NewGuid();
            _surveyDto.BSensorisk = new BSensoriskDto
            {
                Id = _surveyDto.SensoriskId.Value
            };
        }
        else
        {
            _surveyDto.SensoriskId = null;
            _surveyDto.BSensorisk = null;
        }

        if (_selectDyr == "ja")
        {
            _surveyDto.DyrId = Guid.NewGuid();
            _surveyDto.BAnimal = new BAnimalDto
            {
                Id = _surveyDto.DyrId.Value
            };
        }
        else
        {
            _surveyDto.DyrId = null;
            _surveyDto.BAnimal = null;
        }
        
        HttpResponseMessage response;
        if (SurveyId.HasValue && SurveyId.Value != Guid.Empty)
        {
            response = await Http.PutAsJsonAsync(
                $"api/Project/{ProjectId}/station/{StationId}/survey/{SurveyId}",
                _surveyDto);
        }
        else
        {
            response = await Http.PostAsJsonAsync(
                $"api/Project/{ProjectId}/station/{StationId}/survey",
                _surveyDto);
        }

        if (response.IsSuccessStatusCode)
        {
            _result = true;
            _resultMessage = await response.Content.ReadAsStringAsync();
        }
        else
        {
            _result = false;
            _resultMessage = await response.Content.ReadAsStringAsync();
        }
    }
}
