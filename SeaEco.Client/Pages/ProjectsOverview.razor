@page "/projectsOverview"
@using Microsoft.AspNetCore.Authorization
@using SeaEco.Client.Resources
@inject NavigationManager Navigation
@attribute [Authorize]
@using SeaEco.Client.Components

<div class="d-flex justify-content-center">
<div class="d-flex flex-column align-items-center projects-container">
    <div class="mb-3">
        <h3>@Resources.PageProjectsOverviewAllProjects</h3>
    </div>
    
<div class="d-flex flex-column card-container w-100 gap-3">
    
    <button class="btn btn-outline-secondary align-self-end filter-button" type="button"
            data-bs-toggle="collapse" data-bs-target="#collapseFilter" aria-expanded="false" aria-controls="collapseFilter">
        @Resources.ButtonFilter <i class="bi bi-filter"></i>
    </button>

    <div class="collapse card-container w-100" id="collapseFilter">
        <div class="card card-body">
            <div class="d-flex flex-column flex-xxl-row gap-3">
                <div class="d-flex flex-column gap-2">
                    <div class="form-group">
                        <label>@Resources.TableHeaderProjectStatus</label>
                        <MultipleSelectionDropdown
                            Options="@_allStatuses"
                            @bind-SelectedOptions="SelectedStatuses" />
                    </div>
                </div>
                <div class="d-flex flex-column gap-2">
                    <div class="form-group">
                        <label for="locationSelected">@Resources.TableHeaderLocality</label>
                        <select id="locationSelected" class="form-control" @bind="SelectedLocation">
                            <option value="">@Resources.OptionAll</option>
                            @foreach (var location in _allLocations!)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-flex flex-column gap-2">
                    <div class="form-group">
                        <label for="customerSelected">@Resources.TableHeaderCostumer</label>
                        <select id="customerSelected" class="form-control" @bind="SelectedCustomer">
                            <option value="">@Resources.OptionAll</option>
                            @foreach (var customers  in _allCustomers!)
                            {
                                <option value="@customers">@customers</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-flex flex-column gap-2">
                    <div class="form-group">
                        <label for="yearSelect">@Resources.TableHeaderYear</label>
                        <select id="yearSelect" class="form-control" @bind="SelectedYear">
                            <option value="">@Resources.OptionAll</option>
                            @for (int year = DateTime.Now.Year; year >= 2012 ; year--)
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-flex flex-column gap-2">
                    <div class="form-group">
                        <label for="mndSelect">@Resources.TableHeaderMonth</label>
                        <select id="mndSelect" class="form-control" @bind="SelectedMnd">
                            <option value="">@Resources.OptionAll</option>
                            @for (int month = 1; month <= 12; month++)
                            {
                                <option value="@month">@month</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="d-flex flex-xxl-column flex-row align-self-end">
                    <button class="btn btn-outline-secondary filter-button" type="button" @onclick="() => ResetFilter()">
                        @Resources.ButtonReset
                    </button>
                </div>
            </div>
        </div>
    </div>
        

        <div class="table-responsive  d-none d-xxl-block">
            <table class="table table-hover fixed-width-table">
                <colgroup>
                    <col style="width: 190px;">
                    <col style="width: 140px;">
                    <col style="width: 80px;">
                    <col style="width: 80px;">
                    <col style="width: 110px;">
                    <col style="width: 100px;">
                    <col style="width: 160px;">
                    <col style="width: 90px;">
                    <col style="width: 140px;">
                </colgroup>
                <thead>
                <tr>
                    @foreach (var tableHeader in _listTableHeader)
                    {
                        <th style="cursor: pointer" @onclick="() => SortBy(tableHeader)">
                            @tableHeader
                            
                                @if (_currentSortColumn == @tableHeader)
                                {
                                    <i class="bi @(_sortAscending ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                }
                            
                        </th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var project in SortedProjects!)
                {
                    <tr @onclick="() => OnRowClick(project.prosjektId)" style="cursor: pointer">
                        <td>@project.KundeNavn</td>
                        <td>@project.Lokalitet</td>
                        <td>@project.Lokalitetid</td>
                        <td>@project.PoId</td>
                        <td>@project.prosjektId</td>
                        <td>@project.Dato</td>
                        <td>@project.Produksjonsstatus</td>
                        <td>@project.Tilstand</td>
                        <td>@project.Status</td>
                    </tr>
                }
                </tbody>
            </table>
    </div>

    <div class="card-container d-block d-xxl-none">
        <div class="row" style="justify-content: center;">
            @foreach (var project in SortedProjects)
            {
                <div class="col mb-3 card-col">
                    <div class="card" style="cursor: pointer;" @onclick="() => OnRowClick(project.prosjektId)">
                        <div class="card-body text-center @GetStatus(project.Status)">
                            <h5 class="card-title">@project.prosjektId</h5>
                            <span class="corner-text">@project.Status</span>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">@Resources.TableHeaderLocality: @project.Lokalitet</li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
</div>
</div>



@code {
    private List<ProjectDto>? _projects;
    private List<string>? _allLocations;
    private List<string>? _allCustomers;
    private readonly List<string> _allStatuses = ["Nytt", "Påbegynt", "Deaktivert", "Ferdig"];
    private readonly List<string> _listTableHeader =
    [
        Resources.TableHeaderCostumer,
        Resources.TableHeaderLocality,
        Resources.TableHeaderLocalityId,
        Resources.TableHeaderPoId,
        Resources.TableHeaderProjectId,
        Resources.TableHeaderDate,
        Resources.TableHeaderProductionStatus,
        Resources.TableHeaderStatus,
        Resources.TableHeaderProjectStatus
    ];
    
    private int? SelectedYear { get; set; }
    private int? SelectedMnd { get; set; }
    private string? SelectedCustomer { get; set; }
    private string? SelectedLocation { get; set; }
    private List<string> SelectedStatuses { get; set; } = ["Nytt", "Påbegynt", "Ferdig"];
    
    
    private string? _currentSortColumn;
    private bool _sortAscending = true;

    

    //midlertidig classe til databasen er klar
    public class ProjectDto
    {
        public int ProsjektId { get; set; }
        public string KundeNavn { get; set; }
        public string Lokalitet { get; set; }
        public int Lokalitetid { get; set; }
        public int PoId { get; set; }
        public string prosjektId { get; set; }
        public DateOnly? Dato { get; set; }
        public string? Produksjonsstatus { get; set; }
        public int? Tilstand { get; set; }
        public string Status { get; set; }
    }


    //midlertidig data til databasen er klar
    protected override async Task OnInitializedAsync()
    {
        _projects =
        [
            new ProjectDto { ProsjektId = 1, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 450, prosjektId = "SE25-BU-1", Dato = new DateOnly(2025, 1, 14), Produksjonsstatus = "", Tilstand = 2, Status = "Ferdig" },
            new ProjectDto { ProsjektId = 2, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 451, prosjektId = "SE25-BU-3", Dato = new DateOnly(2025, 2, 18), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 3, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 452, prosjektId = "SE25-BU-4", Dato = new DateOnly(2025, 3, 2), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 4, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 453, prosjektId = "SE25-BU-5", Dato = null, Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 5, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 456, prosjektId = "SE25-BU-2", Dato = new DateOnly(2023, 2, 14), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 6, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 457, prosjektId = "SE25-BU-6", Dato = new DateOnly(2025, 1, 1), Produksjonsstatus = "", Tilstand = null, Status = "Deaktivert" },
            new ProjectDto { ProsjektId = 7, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 458, prosjektId = "SE25-BU-7", Dato = new DateOnly(2025, 1, 2), Produksjonsstatus = "", Tilstand = null, Status = "Påbegynt" },
            new ProjectDto { ProsjektId = 1, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 450, prosjektId = "SE25-BU-1", Dato = new DateOnly(2023, 1, 14), Produksjonsstatus = "", Tilstand = 2, Status = "Ferdig" },
            new ProjectDto { ProsjektId = 2, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 451, prosjektId = "SE25-BU-3", Dato = new DateOnly(2025, 2, 18), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 3, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 452, prosjektId = "SE25-BU-4", Dato = new DateOnly(2025, 3, 2), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 4, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 453, prosjektId = "SE25-BU-5", Dato = null, Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 5, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 456, prosjektId = "SE25-BU-2", Dato = new DateOnly(2024, 2, 14), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 6, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 457, prosjektId = "SE25-BU-6", Dato = new DateOnly(2024, 1, 1), Produksjonsstatus = "", Tilstand = null, Status = "Deaktivert" },
            new ProjectDto { ProsjektId = 7, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 458, prosjektId = "SE25-BU-7", Dato = new DateOnly(2025, 1, 2), Produksjonsstatus = "", Tilstand = null, Status = "Påbegynt" },
            new ProjectDto { ProsjektId = 1, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 450, prosjektId = "SE25-BU-1", Dato = new DateOnly(2025, 1, 14), Produksjonsstatus = "", Tilstand = 2, Status = "Ferdig" },
            new ProjectDto { ProsjektId = 2, KundeNavn = "Mortenlaks AS", Lokalitet = "Lille Djupfest", Lokalitetid = 36479, PoId = 451, prosjektId = "SE25-BU-3", Dato = new DateOnly(2025, 2, 18), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 3, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 452, prosjektId = "SE25-BU-4", Dato = new DateOnly(2025, 3, 2), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 4, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 453, prosjektId = "SE25-BU-5", Dato = null, Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 5, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 456, prosjektId = "SE25-BU-2", Dato = new DateOnly(2025, 2, 14), Produksjonsstatus = "", Tilstand = null, Status = "Nytt" },
            new ProjectDto { ProsjektId = 6, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Mohamen", Lokalitetid = 34057, PoId = 457, prosjektId = "SE25-BU-6", Dato = new DateOnly(2025, 1, 1), Produksjonsstatus = "", Tilstand = null, Status = "Deaktivert" },
            new ProjectDto { ProsjektId = 7, KundeNavn = "Salaks Produksjon AS", Lokalitet = "Veldig lang lokalitetsnavn........", Lokalitetid = 34057, PoId = 458, prosjektId = "SE25-BU-7", Dato = new DateOnly(2025, 1, 2), Produksjonsstatus = "", Tilstand = null, Status = "Påbegynt" }
        ];
        
        _allLocations = _projects?
            .Select(p => p.Lokalitet)
            .Distinct()
            .ToList();
        
        _allCustomers = _projects?
            .Select(p => p.KundeNavn)
            .Distinct()
            .ToList();
        
    }

    //Må endres til Guid når vi får påplass databasen
    private void OnRowClick(string prosjektId)
    {
        Navigation.NavigateTo($"project/{prosjektId}");
    }
    
    private string GetStatus(string? status)
    {
        return status switch
        {
            "Nytt" => "card-status-new",
            "Ferdig" => "card-status-done",
            "Påbegynt" => "card-status-started",
            "Deaktivert" => "card-status-deactivated",
            _ => throw new ArgumentOutOfRangeException(nameof(status), status, null)
        };
    }
    
    private IEnumerable<ProjectDto>? FilterProjects
    {
        get
        {
            if (_projects != null)
                return _projects.Where(p =>
                    ((SelectedStatuses == null || !SelectedStatuses.Any()) || SelectedStatuses.Contains(p.Status)) &&
                    (!SelectedYear.HasValue || (p.Dato.HasValue && p.Dato.Value.Year == SelectedYear.Value)) &&
                    (!SelectedMnd.HasValue || (p.Dato.HasValue && p.Dato.Value.Month == SelectedMnd.Value)) &&
                    (String.IsNullOrEmpty(SelectedLocation) || p.Lokalitet == SelectedLocation) &&
                    (String.IsNullOrEmpty(SelectedCustomer) || p.KundeNavn == SelectedCustomer)
                );
            return _projects;
        }
    }

    
    private IEnumerable<ProjectDto>? SortedProjects
    {
        get
        {
            if (FilterProjects == null)
                return null;
            
            //Default sorting by status and date
            if (string.IsNullOrEmpty(_currentSortColumn))
                return FilterProjects?.OrderByDescending(projects => projects.Status).ThenByDescending(projects => projects.Dato).ToList();

            
            var sorted = _currentSortColumn switch
            {
                var col when col == Resources.TableHeaderCostumer => _sortAscending
                    ? FilterProjects.OrderBy(p => p.KundeNavn)
                    : FilterProjects.OrderByDescending(p => p.KundeNavn),
                var col when col == Resources.TableHeaderLocality => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Lokalitet)
                    : FilterProjects.OrderByDescending(p => p.Lokalitet),
                var col when col == Resources.TableHeaderDate => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Dato)
                    : FilterProjects.OrderByDescending(p => p.Dato),
                var col when col == Resources.TableHeaderStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Tilstand)
                    : FilterProjects.OrderByDescending(p => p.Tilstand),
                var col when col == Resources.TableHeaderProjectStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Status)
                    : FilterProjects.OrderByDescending(p => p.Status),
                var col when col == Resources.TableHeaderProductionStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Produksjonsstatus)
                    : FilterProjects.OrderByDescending(p => p.Produksjonsstatus),
                var col when col == Resources.TableHeaderProjectId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.prosjektId)
                    : FilterProjects.OrderByDescending(p => p.prosjektId),
                var col when col == Resources.TableHeaderPoId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.PoId)
                    : FilterProjects.OrderByDescending(p => p.PoId),
                var col when col == Resources.TableHeaderLocalityId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Lokalitetid)
                    : FilterProjects.OrderByDescending(p => p.Lokalitetid),
                _ => FilterProjects
                    
            };

            return sorted;
        }
    }
    
    private void SortBy(string columnName)
    {
        if (_currentSortColumn == columnName)
        {
            if (!_sortAscending)
            {
                _currentSortColumn = null;
                _sortAscending = true;
            }
            else
            {
                _sortAscending = !_sortAscending;
            }
        }
        else
        {
            _currentSortColumn = columnName;
            _sortAscending = true;
        }
    }
    
    private void ResetFilter()
    {
        SelectedYear = null;
        SelectedMnd = null;
        SelectedCustomer = null;
        SelectedLocation = null;
        SelectedStatuses = ["Nytt", "Påbegynt", "Ferdig"];
    }

}



