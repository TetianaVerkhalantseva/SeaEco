@page "/projectsOverview"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using SeaEco.Abstractions.Enums
@using SeaEco.Abstractions.Extensions
@using SeaEco.Abstractions.Models.Project
@using SeaEco.Client.Resources
@inject NavigationManager Navigation
@attribute [Authorize]
@using SeaEco.Client.Components
@inject HttpClient Http



<div class="d-flex justify-content-center">
<div class="d-flex flex-column align-items-center projects-container">
    <div class="mb-3">
        <h2>@Resources.PageProjectsOverviewAllProjects</h2>
    </div>

    @if (_isLoading)
    {
    }
    else
    {
        <div class="d-flex flex-column card-container  gap-5">
            <details class="filter-panel shadow-lg">
                <summary>Filter</summary>
                <div class="filter-options">
                    <div class="d-flex flex-column flex-xxl-row gap-3">
                        <div class="d-flex flex-column gap-2">
                            <div class="form-group">
                                <label class="p-1">@Resources.TableHeaderProjectStatus</label>
                                <MultipleSelectionDropdown
                                    Options="@_allStatuses"
                                    @bind-SelectedOptions="SelectedStatuses"/>
                            </div>
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <div class="form-group">
                                <label for="locationSelected" class="p-1">@Resources.TableHeaderLocality</label>
                                <select id="locationSelected" class="form-select" @bind="SelectedLocation">
                                    <option value="">@Resources.OptionAll</option>
                                    @foreach (var location in _allLocations!)
                                    {
                                        <option value="@location">@location</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <div class="form-group ">
                                <label for="customerSelected" class="p-1">@Resources.TableHeaderCustomer</label>
                                <select id="customerSelected" class="form-select" @bind="SelectedCustomer">
                                    <option value="">@Resources.OptionAll</option>
                                    @foreach (var customers in _allCustomers!)
                                    {
                                        <option value="@customers">@customers</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <div class="form-group">
                                <label for="yearSelect" class="p-1">@Resources.TableHeaderYear</label>
                                <select id="yearSelect" class="form-select" @bind="SelectedYear">
                                    <option value="">@Resources.OptionAll</option>
                                    @for (int year = DateTime.Now.Year; year >= 2012; year--)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <div class="form-group">
                                <label for="mndSelect" class="p-1">@Resources.TableHeaderMonth</label>
                                <select id="mndSelect" class="form-select" @bind="SelectedMnd">
                                    <option value="">@Resources.OptionAll</option>
                                    @for (int month = 1; month <= 12; month++)
                                    {
                                        <option value="@month">@month</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="flex-grow-1"></div>
                        <div class="d-flex flex-xxl-column flex-row align-self-end">
                            <button class="btn btn-secondary" type="button" @onclick="() => ResetFilter()">
                                @Resources.ButtonReset
                            </button>
                        </div>
                    </div>
                </div>
            </details>

            <div class="table-responsive  d-none d-xxl-block">
                <table class="table table-hover fixed-width-table">
                    <colgroup>
                        <col style="width: 180px;">
                        <col style="width: 140px;">
                        <col style="width: 85px;">
                        <col style="width: 80px;">
                        <col style="width: 110px;">
                        <col style="width: 100px;">
                        <col style="width: 165px;">
                        <col style="width: 90px;">
                        <col style="width: 140px;">
                    </colgroup>
                    <thead>
                    <tr>
                        @foreach (var tableHeader in _listTableHeader)
                        {
                            <th class="cursor" @onclick="() => SortBy(tableHeader)">
                                @tableHeader

                                @if (_currentSortColumn == @tableHeader)
                                {
                                    <i class="bi @(_sortAscending ? "bi-arrow-down" : "bi-arrow-up")"></i>
                                }

                            </th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var project in SortedProjects!)
                    {
                        <tr class="cursor" @onclick="() => OnRowClick(project.Id)">
                            <td>@project.Oppdragsgiver</td>
                            <td>@project.Lokalitetsnavn</td>
                            <td>@project.LokalitetsId</td>
                            <td>@project.PoId</td>
                            <td>@project.ProsjektIdSe</td>
                            <td>@project.StationDatesString</td>
                            <td>@project.Produksjonsstatus.GetDescription()</td>
                            <td>@project.Tilstand</td>
                            <td>@project.Prosjektstatus.GetDescription()</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>

            <div class="card-container d-block d-xxl-none">
                <div class="row" style="justify-content: center;">
                    @foreach (var project in SortedProjects)
                    {
                        <div class="col mb-3 card-col">
                            <div class="card cursor" @onclick="() => OnRowClick(project.Id)">
                                <div class="card-body text-center @GetStatus(project.Prosjektstatus.GetDescription())">
                                    <h5 class="card-title">@project.ProsjektIdSe</h5>
                                    <span class="corner-text">@project.Prosjektstatus.GetDescription()</span>
                                </div>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">@Resources.TableHeaderLocality: @project.Lokalitetsnavn</li>
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div >
</div>



@code {
    private List<ProjectDto>? _projects;
    private List<string>? _allLocations;
    private List<string>? _allCustomers;
    private bool _isLoading = true;
    private readonly List<string> _allStatuses = ["Nytt", "Påbegynt", "Deaktivert", "Ferdig"];
    private readonly List<string> _listTableHeader =
    [
        Resources.TableHeaderCustomer,
        Resources.TableHeaderLocality,
        Resources.TableHeaderLocalityId,
        Resources.TableHeaderPoId,
        Resources.TableHeaderProjectId,
        Resources.TableHeaderDate,
        Resources.TableHeaderProductionStatus,
        Resources.TableHeaderStatus,
        Resources.TableHeaderProjectStatus
    ];
    
    private int? SelectedYear { get; set; }
    private int? SelectedMnd { get; set; }
    private string? SelectedCustomer { get; set; }
    private string? SelectedLocation { get; set; }
    private List<string> SelectedStatuses { get; set; } = ["Nytt", "Påbegynt", "Ferdig"];
    
    private string? _currentSortColumn;
    private bool _sortAscending = true;
    
   
    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            _projects = await Http.GetFromJsonAsync<List<ProjectDto>>("/api/Project");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($@"{Resources.ErrorMessageLoadingUsers} {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
        
        _allLocations = _projects?
            .Select(p => p.Lokalitetsnavn)
            .Distinct()
            .ToList();
        
        _allCustomers = _projects?
            .Select(p => p.Oppdragsgiver)
            .Distinct()
            .ToList();
        
    }


    private void OnRowClick(Guid prosjektId)
    {
        Navigation.NavigateTo($"project/{prosjektId:D}");
    }
    
    private static string GetStatus(string? status)
    {
        return status switch
        {
            "Nytt" => "card-status-new",
            "Ferdig" => "card-status-done",
            "Påbegynt" => "card-status-started",
            "Deaktivert" => "card-status-deactivated",
            _ => throw new ArgumentOutOfRangeException(nameof(status), status, null)
        };
    }
    
    private IEnumerable<ProjectDto>? FilterProjects
    {
        get
        {
            if (_projects != null)
                return _projects.Where(p =>
                    ((!SelectedStatuses.Any()) || SelectedStatuses.Contains(p.Prosjektstatus.GetDescription())) &&
                    (!SelectedYear.HasValue || (p.Feltdatoer.Any(d => d.Year == SelectedYear.Value))) &&
                    (!SelectedMnd.HasValue || (p.Feltdatoer.Any(d => d.Month == SelectedMnd.Value))) &&
                    (string.IsNullOrEmpty(SelectedLocation) || p.Lokalitetsnavn == SelectedLocation) &&
                    (string.IsNullOrEmpty(SelectedCustomer) || p.Oppdragsgiver == SelectedCustomer)
                );
            return _projects;
        }
    }
    
    private IEnumerable<ProjectDto>? SortedProjects
    {
        get
        {
            if (FilterProjects == null)
                return null;
            
            //Default sorting by status and date
            if (string.IsNullOrEmpty(_currentSortColumn))
                return FilterProjects?.OrderByDescending(projects => projects.Prosjektstatus).ThenByDescending(projects => projects.StationDatesString).ToList();

            
            var sorted = _currentSortColumn switch
            {
                var col when col == Resources.TableHeaderCustomer => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Oppdragsgiver)
                    : FilterProjects.OrderByDescending(p => p.Oppdragsgiver),
                var col when col == Resources.TableHeaderLocality => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Lokalitetsnavn)
                    : FilterProjects.OrderByDescending(p => p.Lokalitetsnavn),
                var col when col == Resources.TableHeaderDate => _sortAscending
                    ? FilterProjects.OrderBy(p => p.StationDatesString)
                    : FilterProjects.OrderByDescending(p => p.StationDatesString),
                var col when col == Resources.TableHeaderStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Tilstand)
                    : FilterProjects.OrderByDescending(p => p.Tilstand),
                var col when col == Resources.TableHeaderProjectStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Prosjektstatus.GetDescription())
                    : FilterProjects.OrderByDescending(p => p.Produksjonsstatus.GetDescription()),
                var col when col == Resources.TableHeaderProductionStatus => _sortAscending
                    ? FilterProjects.OrderBy(p => p.Produksjonsstatus.GetDescription())
                    : FilterProjects.OrderByDescending(p => p.Produksjonsstatus.GetDescription()),
                var col when col == Resources.TableHeaderProjectId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.ProsjektIdSe)
                    : FilterProjects.OrderByDescending(p => p.ProsjektIdSe),
                var col when col == Resources.TableHeaderPoId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.PoId)
                    : FilterProjects.OrderByDescending(p => p.PoId),
                var col when col == Resources.TableHeaderLocalityId => _sortAscending
                    ? FilterProjects.OrderBy(p => p.LokalitetsId)
                    : FilterProjects.OrderByDescending(p => p.LokalitetsId),
                _ => FilterProjects
                    
            };

            return sorted;
        }
    }
    
    private void SortBy(string columnName)
    {
        if (_currentSortColumn == columnName)
        {
            if (!_sortAscending)
            {
                _currentSortColumn = null;
                _sortAscending = true;
            }
            else
            {
                _sortAscending = !_sortAscending;
            }
        }
        else
        {
            _currentSortColumn = columnName;
            _sortAscending = true;
        }
    }
    
    private void ResetFilter()
    {
        SelectedYear = null;
        SelectedMnd = null;
        SelectedCustomer = null;
        SelectedLocation = null;
        SelectedStatuses = ["Nytt", "Påbegynt", "Ferdig"];
    }

}



