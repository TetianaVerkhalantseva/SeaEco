@page "/ForgotPassword"
@using SeaEco.Abstractions.Models.Authentication
@using SeaEco.Client.Resources
@inject HttpClient Http


<EditForm Model="_mail" OnValidSubmit="ToResetPassword" >
    <DataAnnotationsValidator />
<div class="d-flex flex-column align-items-center ">
    <div class="d-flex flex-column  mb-3 align-items-center gap-2">
        <h2>@Resources.PageForgotPasswordForgotPassword</h2>
        <p class="custom-gray-text">@Resources.PageForgotPasswordHow</p>
    </div>

    <div class="d-flex flex-column gap-4">
        <div class="d-flex flex-column gap-2">
            @if (_mail != null)
            {
                <InputText id="email" class="form-control inputText-min-width" @bind-Value="_mail.Email" placeholder="@Resources.InputTextMail" @oninput="() => { _errorMessage = null; _successMessage = null;}"/>
            }
        </div>
        
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn custom-btn">@Resources.ButtonSubmit</button>
        </div>
    </div>
    
        <div class=" text-center mt-3">
                <div class="custom-validation-summary">
                    <ValidationSummary/>
                </div>   
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">@_errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success">@_successMessage</div>
            }
        </div>
</div>
</EditForm>

@code {
    private readonly ResetPasswordDto? _mail = new();
    private string? _errorMessage;
    private string? _successMessage;


    private async Task ToResetPassword()
    {
        _errorMessage = string.Empty;
        _successMessage = string.Empty;

        var response = await Http.PostAsJsonAsync("api/authentication/request-reset-password",_mail);
        
        if (response.IsSuccessStatusCode)
        {
            _successMessage = @Resources.SuccessMessageMailSendt;
        }
        else
        {
            _errorMessage = response.StatusCode == System.Net.HttpStatusCode.BadRequest ? Resources.ErrorMessageWrongMail : Resources.ErrorMessageUnexpected;
        }
    }
}