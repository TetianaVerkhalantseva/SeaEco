@page "/login"
@using SeaEco.Abstractions.Models.Authentication
@using SeaEco.Client.Resources
@inject NavigationManager Navigation
@inject HttpClient Http


<EditForm Model="_login" OnValidSubmit="ToMainPage" >
    <DataAnnotationsValidator />
<div class="d-flex flex-column align-items-center ">
    <div class="mb-3">
        <h2>@Resources.PageLoginLogin</h2>
    </div>

    <div class="d-flex flex-column gap-4">
        <div class="d-flex flex-column gap-2">
            @if (_login != null)
            {
                <InputText id="email" class="form-control inputText-min-width" @bind-Value="_login.Email" placeholder="@Resources.InputTextMail" @oninput="() => _errorMessage = null"/>
                <InputText type="password" id="password"   class="form-control inputText-min-width" @bind-Value="_login.Password" placeholder="@Resources.InputTextPassword" @oninput="() => _errorMessage = null"/>
            }
        </div>
        
        <div class="d-flex justify-content-center">
            <NavLink class="btn custom-outline-secondary-btn me-2" href="forgotPassword">@Resources.ButtonForgotPassword</NavLink>
            <button type="submit" class="btn custom-btn">@Resources.ButtonLogin</button>
        </div>
        

        <div class=" text-center">
                <div class="custom-validation-summary">
                    <ValidationSummary/>
                </div>   
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <p class="text-danger">@_errorMessage</p>
            }
        </div>
    </div>
</div>
</EditForm>

@code {
    private readonly LoginDto? _login = new();
    private string? _errorMessage;


    private async Task ToMainPage()
    {
        _errorMessage = string.Empty;
        
        var response = await Http.PostAsJsonAsync("api/authentication/login",_login);
        
        if (response.IsSuccessStatusCode)
        {    
            Navigation.NavigateTo("/projectsOverview", forceLoad: true);
        }
        else
        {
            _errorMessage = response.StatusCode == System.Net.HttpStatusCode.BadRequest ? Resources.ErrorMessageWrongMailOrPassword : Resources.ErrorMessageUnexpected;
        }
    }
}