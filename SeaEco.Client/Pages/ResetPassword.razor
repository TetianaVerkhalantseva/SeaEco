@page "/resetPassword"
@using SeaEco.Abstractions.Models.Authentication
@using SeaEco.Client.Resources
@inject NavigationManager Navigation
@inject HttpClient Http


<EditForm Model="_password" OnValidSubmit="ToLogin" >
    <DataAnnotationsValidator />
    <div class="d-flex flex-column align-items-center ">
        <div class="d-flex justify-content-center mb-3">
            <h3>@Resources.PageResetPasswordResetPassword</h3>
        </div>
        <div class="d-flex flex-column gap-4">
            <div class="d-flex flex-column gap-2">
                @if (_password != null)
                {
                    <InputText type="password" id="password" class="form-control inputText-min-width" @bind-Value="_password.Password" placeholder="@Resources.InputTextPassword" @oninput="() => _errorMessage = null"/>
                    <InputText type="password" id="confirmPassword" class="form-control inputText-min-width" @bind-Value="_password.ConfirmPassword" placeholder="@Resources.InputTextRepPassword" @oninput="() => _errorMessage = null"/>
                }
            </div>

            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-secondary">@Resources.ButtonSave</button>
            </div>
        </div>

            <div class=" text-center mt-3">
                <div class="custom-validation-summary">
                    <ValidationSummary/>
                </div>
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <p class="text-danger">@_errorMessage</p>
                }
            </div>
       
    </div>
</EditForm>

@code {
    private readonly ResetPasswordConfirmDto? _password = new();
    private string? _errorMessage;

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }
    
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            _password!.Token = Token;
        }
        else
        {
            _errorMessage = Resources.ErrorMessageNoToken;
        }
    }


    private async Task ToLogin()
    {
        _errorMessage = string.Empty;
        
        var response = await Http.PostAsJsonAsync("api/authentication/reset-password",_password);
        
        if (response.IsSuccessStatusCode)
        {    
            Navigation.NavigateTo("/login");
        }
        else
        {
            _errorMessage = response.StatusCode == System.Net.HttpStatusCode.BadRequest ? Resources.ErrorMessageToken : Resources.ErrorMessageUnexpected;
        }
    }
}


