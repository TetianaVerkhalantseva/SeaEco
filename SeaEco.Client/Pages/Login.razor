@page "/login"
@using SeaEco.Abstractions.Models.Authentication
@using SeaEco.Client.Resources
@inject NavigationManager Navigation
@inject HttpClient Http


<EditForm Model="_login" OnValidSubmit="ToMainPage" >
    <DataAnnotationsValidator />
<div class="d-flex flex-column align-items-center ">
    <div class="mb-4">
        <h3>@Resources.PageLoginLogin</h3>
    </div>

    <div class="d-flex flex-column gap-4">
        <div class="d-flex flex-column gap-2">
            <InputText type="email" id="email" class="form-control" @bind-Value="_login.Email" placeholder="@Resources.InputTextMail" @oninput="() => _errorMessage = null"/>
            <InputText type="password" id="password" class="form-control" @bind-Value="_login.Password" placeholder="@Resources.InputTextPassword" @oninput="() => _errorMessage = null" />
        </div>
        
        <div class="d-flex justify-content-center">
            <button class="btn btn-secondary me-2" type ="button" @onclick="ToForgotPassword">@Resources.ButtonForgotPassword</button>
            <button type="submit" @onclick="() => {_clickedOnForgotPassword = false; _errorMessage = string.Empty; }" class="btn btn-primary">@Resources.ButtonLogin</button>
        </div>
        

        <div class=" text-center">
            @if (!_clickedOnForgotPassword)
            {
                <div class="custom-validation-summary">
                    <ValidationSummary/>
                </div>   
            }
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <p class="text-danger">@_errorMessage</p>
            }
        </div>
    </div>
</div>
</EditForm>

@code {
    private LoginDto? _login = new();
    private string? _errorMessage;
    private bool _clickedOnForgotPassword;

    private async Task ToMainPage()
    {
        _errorMessage = string.Empty;
        _clickedOnForgotPassword = false;
        
        var response = await Http.PostAsJsonAsync("api/authentication/login",_login);
        
        if (response.IsSuccessStatusCode)
        {    
            Navigation.NavigateTo("/projectsOverview", forceLoad: true);
        }
        else
        {
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                _errorMessage = Resources.ErrorMessageWrongMailOrPassword;
            }
            else
            {
                _errorMessage = Resources.ErrorMessageUnexpected;
            }
        }
    }
    
    private void ToForgotPassword()
    {
        _errorMessage = string.Empty;
        var hasError = false;
        _clickedOnForgotPassword = true;

        if (string.IsNullOrWhiteSpace(_login.Email))
        {
            _errorMessage = Resources.ErrorMessageMailRequired;
            hasError = true;
        }

        if (hasError) return;
        
        Navigation.NavigateTo("/forgotPassword");
    }
    
}