@page "/editUser/{userId:guid}"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@attribute [Authorize(Roles = "admin")]
@using SeaEco.Abstractions.Models.User
@using SeaEco.Client.Resources
@inject NavigationManager Navigation


<EditForm Model="userEdit" OnValidSubmit="UserEdit" >
    <DataAnnotationsValidator />
    <div class="d-flex flex-column align-items-center">
        @if (isLoading)
        {
        }
        else if (user == null)
        {
            <div class="mb-3">
                <h3>@Resources.PageEditUserEditUser</h3>
            </div>
            <p>@Resources.PageEditUserNoUserFound</p>
        }
        else
        {
            <div class="mb-3">
                <h3>@Resources.PageEditUserEditUser</h3>
            </div>
            <div class="d-flex flex-column ">
                <div class="d-flex flex-column gap-2">
                    <div class="d-flex justify-content-center gap-2">
                        <InputText id="firstName" class="form-control" @bind-Value="userEdit.FirstName" placeholder="@Resources.FirstNameInputText" />
                        <InputText id="lastName" class="form-control" @bind-Value="userEdit.LastName" placeholder="@Resources.LastNameInputText" />
                    </div>
                    <InputText id="email" class="form-control" @bind-Value="userEdit.Email" placeholder="@Resources.MailInputText" />
                    </div>

                <div class="mt-2">
                    <input type="checkbox" id="admin" @bind="userEdit.IsAdmin" />
                    <label class="ms-1" title="@(Resources.TooltipAdmin + "\n" + Resources.TooltipAdminOne + "\n" + Resources.TooltipAdminTwo  + "\n" +Resources.TooltipAdminThree)">@Resources.AdminCheckboks</label>
                </div>

                <div class="d-flex justify-content-center">
                    <NavLink class="btn btn-secondary me-2" href="/user">@Resources.ButtonCancel</NavLink>
                    <button typee = submit class="btn btn-secondary me-2">@Resources.ButtonSave</button>
                </div>

                <div class="mt-3 text-center" style="height: 30px">
                    <div class="custom-validation-summary">
                        <ValidationSummary/>
                    </div>

                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <p class="text-danger">@_errorMessage</p>
                    }
                </div>
            </div>
        }
    </div>
</EditForm>


@code {
    [Parameter]
    public Guid userId { get; set; }
    private UserDto user;
    private EditUserDto userEdit = new EditUserDto();
    private bool isLoading = true;
    private string?  _errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await Http.GetFromJsonAsync<UserDto>($"api/users/{userId}");
            if (user != null)
            {
                userEdit = new EditUserDto
                {
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Email = user.Email,
                    IsAdmin = user.IsAdmin,
                    IsActive = user.IsActive
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved lasting av bruker: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UserEdit()
    {
        var response = await Http.PutAsJsonAsync($"api/users/{user.Id:D}/update", userEdit);
        if (response.IsSuccessStatusCode)
        {    
            Navigation.NavigateTo("/user", forceLoad: true);
        }
        else
        {
            _errorMessage = @Resources.UnexpectedErrorMessage;
        }
    }
}
