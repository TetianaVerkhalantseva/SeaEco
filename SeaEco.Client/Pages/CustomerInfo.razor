@page "/CustomerInfo/{CustomerId:guid}"
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using SeaEco.Client.Resources
@attribute [Authorize]
@inject NavigationManager Navigation
@using SeaEco.EntityFramework.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using SeaEco.Abstractions.Enums
@using SeaEco.Abstractions.Extensions


<div class="container mt-5">
    <div class="row justify-content-center">
        @if (_customer != null)
        {
            <div class="col-md-8 col-lg-6">
                <div class="customer-card shadow-lg p-4 rounded-3">
                    <div class="card-body text-center">
                        <h4 class="customer-title">@Resources.PageCustomerInfoCustomerName</h4>
                        <p class="customer-info">@_customer.Oppdragsgiver</p>

                        <h4 class="customer-title">@Resources.PageCustomerInfoContactPerson</h4>
                        <p class="customer-info">@_customer.Kontaktperson</p>

                        <h4 class="customer-title">@Resources.PageCustomerInfoCustomerNumber</h4>
                        <p class="customer-info">@_customer.Telefon</p>
                    </div>

                    <div class="position-absolute bottom-0 start-0 mb-3 ms-3">
                        <button class="btn custom-outline-secondary-btn me-2" @onclick="BackToCustomerPage">@Resources.ButtonCancel</button>
                    </div>

                    <div class="position-absolute bottom-0 end-0 mb-3 me-3">
                        <AuthorizeView Roles="admin">
                            <button class="btn custom-outline-secondary-btn" @onclick="DeleteCustomer">@Resources.ButtonDelete</button>
                        </AuthorizeView>
                        
                        <button class="btn custom-btn" @onclick="EditCustomerPage">@Resources.ButtonEdit</button>
                    </div>
                </div>

                <div class="mt-3 text-center">
                    @if (_result.HasValue)
                    {
                        @if (_result.Value)
                        {
                            <div class="alert alert-success">@Resources.PageCustomerInfoDeleteCustomerSuccess</div>
                        }
                        else
                        {
                            <div class="alert alert-danger">@Resources.PageCustomerInfoDeleteCustomerFailed</div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <div class="container mt-3">
        <h2 class="text-center mt-4 page-title">@Resources.PageCustomerInfoProjects</h2>
        
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="w-50">
                <select class="form-select" @onchange="OnSortChanged">
                    <option value="all">Alle</option>
                    <option value="status-started">Påbegynt</option>
                    <option value="status-new">Nytt</option>
                    <option value="status-ongoing">Pågår</option>
                    <option value="status-done">Ferdig</option>
                    <option value="name-asc">Sorter etter navn: A-Z</option>
                    <option value="name-desc">Sorter etter navn: Z-A</option>
                    <option value="date-asc">Sorter etter dato: eldst først</option>
                    <option value="date-desc">Sorter etter dato: nyest først</option>
                </select>
            </div>

            <!-- onclick to create new project page -->
            <button class="btn custom-btn ms-3" @onclick="ToNewProjectPage"> 
                @Resources.ButtonAddNewProject
            </button>
        </div>
    </div>
    
    <div class="row justify-content-center">
        @if (_customer?.BProsjekts != null)
        {
            @foreach (var project in _customer.BProsjekts)
            {
                <div class="col-md-5 col-lg-4 mb-4">
                    <div class="card shadow-sm p-4 rounded-3 hover-effect d-flex align-items-center justify-content-center">
                        
                        <!-- href to project detail page -->
                        <a href=""><h5 class="project-info">@project.PoId</h5></a>
                        <a href="">
                            <p>@(project.Prosjektstatus.ToEnumDescription<Prosjektstatus>())</p>
                        </a>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-md-5 col-lg-4 mb-4">
                <p>@Resources.PageCustomerInfoNoProject</p>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    public Guid CustomerId { get; set; }
    private Kunde? _customer = new();
    private bool? _result;
    private string _currentSort = "all";
    private List<BProsjekt> _allProjects = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerInfoData();
    }

    private async Task LoadCustomerInfoData()
    {
        try
        {
            _customer = await Http.GetFromJsonAsync<Kunde>($"api/Customer/Project-details-for-customer/{CustomerId}");
            _customer.BProsjekts = new List<BProsjekt>
            {
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1001",
                    Prosjektstatus = 3
                },
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1002",
                    Prosjektstatus = 2,
                    Datoregistrert = DateTime.Now
                },
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1003",
                    Prosjektstatus = 2,
                    Datoregistrert = DateTime.Now
                },
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1004",
                    Prosjektstatus = 1,
                    Datoregistrert = DateTime.Now
                },
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1005",
                    Prosjektstatus = 2,
                    Datoregistrert = DateTime.Now
                },
                new BProsjekt
                {
                    Id = new Guid(),
                    PoId = "1006",
                    Prosjektstatus = 1,
                    Datoregistrert = DateTime.Now
                },
                new BProsjekt
                {
                Id = new Guid(),
                PoId = "1007",
                Prosjektstatus = 5,
                Datoregistrert = DateTime.MinValue 
                }
            };
            _allProjects = _customer.BProsjekts.ToList();
            SortProjectList(_currentSort);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        _currentSort = e.Value?.ToString() ?? "all";
        SortProjectList(_currentSort);
    }

    private void SortProjectList(string sortOption)
    {
        if (_customer?.BProsjekts == null) return;

        _customer.BProsjekts = _allProjects.ToList();

        switch (sortOption)
        {
            case "all":
                break;
            case "status-started":
                _customer.BProsjekts = _customer.BProsjekts
                    .Where(p => (Prosjektstatus)p.Prosjektstatus == Prosjektstatus.Pabegynt)
                    .ToList();
                break;
            case "status-new":
                _customer.BProsjekts = _customer.BProsjekts
                    .Where(p => (Prosjektstatus)p.Prosjektstatus == Prosjektstatus.Nytt)
                    .ToList();
                break;
            case "status-ongoing":
                _customer.BProsjekts = _customer.BProsjekts
                    .Where(p => (Prosjektstatus)p.Prosjektstatus == Prosjektstatus.Pagar)
                    .ToList();
                break;
            case "status-done":
                _customer.BProsjekts = _customer.BProsjekts
                    .Where(p => (Prosjektstatus)p.Prosjektstatus == Prosjektstatus.Ferdig)
                    .ToList();
                break;
            case "name-asc":
                _customer.BProsjekts = _customer.BProsjekts
                    .OrderBy(p => p.PoId)
                    .ToList();
                break;
            case "name-desc":
                _customer.BProsjekts = _customer.BProsjekts
                    .OrderByDescending(p => p.PoId)
                    .ToList();
                break;
            case "date-asc":
                _customer.BProsjekts = _customer.BProsjekts
                    .OrderBy(p => p.Datoregistrert)
                    .ToList();
                break;
            case "date-desc":
                _customer.BProsjekts = _customer.BProsjekts
                    .OrderBy(p => p.Datoregistrert)
                    .ToList();
                break;
        }
        StateHasChanged();
    }

    private void BackToCustomerPage()
    {
        Navigation.NavigateTo("Customer");
    }
    
    private void EditCustomerPage()
    {
        Navigation.NavigateTo($"EditCustomer/{CustomerId}");
    }

    private void ToNewProjectPage()
    {
        Navigation.NavigateTo($"NewProject/{CustomerId}");
    }

    private async Task DeleteCustomer()
    {
        var response = await Http.DeleteAsync($"api/Customer/Delete-customer/{CustomerId}");
        if (response.IsSuccessStatusCode)
        {
            _result = true;
            StateHasChanged();
            await Task.Delay(2000);
            Navigation.NavigateTo("Customer");
        }
        else
        {
            _result = false;
        }
    }
}
