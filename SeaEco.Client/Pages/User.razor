@page "/user"
@using Microsoft.AspNetCore.Authorization
@using SeaEco.Abstractions.Models.User
@using SeaEco.Client.Resources
@inject HttpClient Http
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager NavigationManager




<div class="d-flex flex-column align-items-center" >
    
    @if (isLoading)
    {
    }
    else if (users == null)
    {
    }
    else if (!users.Any())
    {
        <div class="mb-3">         
            <h3>@Resources.PageUserAllUsers</h3>  
        </div>                                           
        <p>@Resources.PageUserNoUserFoun</p>    
        <div style="width: 100%; display: flex; justify-content: flex-start; margin-top: 1rem;">   
            <NavLink class="btn btn-secondary" href="/registerUser">@Resources.ButtonAddNewUser</NavLink>              
        </div>                                                                              
    }
    else
    {
        <div class="mb-3">         
            <h3>@Resources.PageUserAllUsers</h3>  
        </div>                                            
        <div class="table-responsive">
            <table class="table">
                <thead>
                <tr>
                    <th>@Resources.TableHeadingName</th>
                    <th>@Resources.TableHeadingMail</th>
                    <th>@Resources.TableHeadingRole</th>
                    <th style="width:60px;"></th>
                    <th></th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.FullName</td>
                        <td>@user.Email</td>
                        <td>@(user.IsAdmin ? @Resources.TableInputIsAdmin : @Resources.TableInputIsNotAdmin)</td>
                        <td></td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input  " type="checkbox"  role="switch" id="activ" checked="@user.IsActive"  @onchange="@(e => EditUserIsActive(user, e))"/>
                                @if(user.IsActive)
                                {
                                    <label class="form-check-label"  for="activ">@Resources.TableInputIsActive</label> 
                                }
                                else                                                  
                                {                                                                   
                                    <label class="form-check-label"  for="activ">@Resources.TableInputIsNotActive</label>     
                                }                                                                   
                            </div>
                        </td>
                        <td>
                            <span title="@Resources.TooltipRegisterUser">
                                <span class="bi bi-editUser" style="cursor: pointer;" @onclick="@(() => EditUser(user.Id))">
                                </span>
                            </span>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        
            <div style="width: 100%; display: flex; justify-content: flex-start; margin-top: 1rem;">
                <NavLink class="btn btn-secondary" href="/registerUser">@Resources.ButtonAddNewUser</NavLink>
            </div>
        </div>} 
        </div>
        



@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private EditUserDto userEdit = new EditUserDto();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var usersList = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
            users = usersList?.OrderBy(user => user.FullName).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved lasting av brukere: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }



    private async Task EditUserIsActive(UserDto user, ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isActive))
        {
            user.IsActive = isActive;
            
            userEdit = new EditUserDto
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                IsAdmin = user.IsAdmin,
                IsActive = isActive
            };
        }
        
            try
            { 
                 await Http.PutAsJsonAsync($"api/users/{user.Id:D}/update", userEdit);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved lasting av brukere: {ex.Message}");
            }
    }


    private void EditUser(Guid userId)
    {
        NavigationManager.NavigateTo($"editUser/{userId:D}");
    }
    
}
